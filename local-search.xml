<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>Hello World</title>
    <link href="/2021/09/29/hello-world/"/>
    <url>/2021/09/29/hello-world/</url>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo new <span class="hljs-string">&quot;My New Post&quot;</span><br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo server<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo generate<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo deploy<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>thymeleaf 常用标签的使用方法</title>
    <link href="/2018/07/23/2018-7-23-thymeleaf/"/>
    <url>/2018/07/23/2018-7-23-thymeleaf/</url>
    
    <content type="html"><![CDATA[<h4 id="一-基本使用方式"><a href="#一-基本使用方式" class="headerlink" title="一.基本使用方式"></a>一.基本使用方式</h4><p>后端代码：</p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs reasonml">@<span class="hljs-constructor">RequestMapping(<span class="hljs-string">&quot;test&quot;</span>)</span><br>public String test(ModelMap map) &#123;<br>    <br>    User u = <span class="hljs-keyword">new</span> <span class="hljs-constructor">User()</span>;<br>    u.set<span class="hljs-constructor">Name(<span class="hljs-string">&quot;superadmin&quot;</span>)</span>;<br>    u.set<span class="hljs-constructor">Age(10)</span>;<br>    u.set<span class="hljs-constructor">Password(<span class="hljs-string">&quot;123465&quot;</span>)</span>;<br>    u.set<span class="hljs-constructor">Birthday(<span class="hljs-params">new</span> Date()</span>);<br>    u.set<span class="hljs-constructor">Desc(<span class="hljs-string">&quot;&lt;font color=&#x27;green&#x27;&gt;&lt;b&gt;hello imooc&lt;/b&gt;&lt;/font&gt;&quot;</span>)</span>;<br>    <br>    map.add<span class="hljs-constructor">Attribute(<span class="hljs-string">&quot;user&quot;</span>, <span class="hljs-params">u</span>)</span>;<br>    <br>    User u1 = <span class="hljs-keyword">new</span> <span class="hljs-constructor">User()</span>;<br>    u1.set<span class="hljs-constructor">Age(19)</span>;<br>    u1.set<span class="hljs-constructor">Name(<span class="hljs-string">&quot;imooc&quot;</span>)</span>;<br>    u1.set<span class="hljs-constructor">Password(<span class="hljs-string">&quot;123456&quot;</span>)</span>;<br>    u1.set<span class="hljs-constructor">Birthday(<span class="hljs-params">new</span> Date()</span>);<br>    <br>    User u2 = <span class="hljs-keyword">new</span> <span class="hljs-constructor">User()</span>;<br>    u2.set<span class="hljs-constructor">Age(17)</span>;<br>    u2.set<span class="hljs-constructor">Name(<span class="hljs-string">&quot;LeeCX&quot;</span>)</span>;<br>    u2.set<span class="hljs-constructor">Password(<span class="hljs-string">&quot;123456&quot;</span>)</span>;<br>    u2.set<span class="hljs-constructor">Birthday(<span class="hljs-params">new</span> Date()</span>);<br>    <br>    List&lt;User&gt; userList = <span class="hljs-keyword">new</span> ArrayList&lt;&gt;<span class="hljs-literal">()</span>;<br>    userList.add(u);<br>    userList.add(u1);<br>    userList.add(u2);<br>    <br>    map.add<span class="hljs-constructor">Attribute(<span class="hljs-string">&quot;userList&quot;</span>, <span class="hljs-params">userList</span>)</span>;<br>    <br>    return <span class="hljs-string">&quot;thymeleaf/test&quot;</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>前端代码：</p><figure class="highlight dust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs dust"><span class="xml">用户姓名:<span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">th:id</span>=<span class="hljs-string">&quot;$</span></span></span><span class="hljs-template-variable">&#123;user.name&#125;</span><span class="xml"><span class="hljs-tag"><span class="hljs-string">&quot;</span> <span class="hljs-attr">th:name</span>=<span class="hljs-string">&quot;$</span></span></span><span class="hljs-template-variable">&#123;user.name&#125;</span><span class="xml"><span class="hljs-tag"><span class="hljs-string">&quot;</span> <span class="hljs-attr">th:value</span>=<span class="hljs-string">&quot;$</span></span></span><span class="hljs-template-variable">&#123;user.name&#125;</span><span class="xml"><span class="hljs-tag"><span class="hljs-string">&quot;</span>/&gt;</span></span><br><span class="xml">//转换生日格式</span><br><span class="xml">用户生日：<span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">th:value</span>=<span class="hljs-string">&quot;$</span></span></span><span class="hljs-template-tag">&#123;#<span class="hljs-name">dates.format</span>(user.birthday,&#x27;yyyy-MM-dd&#x27;)&#125;</span><span class="xml"><span class="hljs-tag"><span class="hljs-string">&quot;</span>/&gt;</span></span><br></code></pre></td></tr></table></figure><h4 id="二-对象引用方式"><a href="#二-对象引用方式" class="headerlink" title="二.对象引用方式"></a>二.对象引用方式</h4><figure class="highlight dust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs dust"><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">th:object</span>=<span class="hljs-string">&quot;$</span></span></span><span class="hljs-template-variable">&#123;user&#125;</span><span class="xml"><span class="hljs-tag"><span class="hljs-string">&quot;</span>&gt;</span></span><br><span class="xml">    用户姓名：<span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">th:id</span>=<span class="hljs-string">&quot;*</span></span></span><span class="hljs-template-variable">&#123;name&#125;</span><span class="xml"><span class="hljs-tag"><span class="hljs-string">&quot;</span> <span class="hljs-attr">th:name</span>=<span class="hljs-string">&quot;*name&quot;</span> <span class="hljs-attr">th:value</span>=<span class="hljs-string">&quot;*</span></span></span><span class="hljs-template-variable">&#123;name&#125;</span><span class="xml"><span class="hljs-tag"><span class="hljs-string">&quot;</span>/&gt;</span></span><br><span class="xml">    用户生日：<span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">th:value</span>=<span class="hljs-string">&quot;*$</span></span></span><span class="hljs-template-tag">&#123;#<span class="hljs-name">dates.format</span>(birthday,&#x27;yyyy-MM-dd hh:mm:ss&#x27;)&#125;</span><span class="xml"><span class="hljs-tag"><span class="hljs-string">&quot;</span>/&gt;</span></span><br><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br></code></pre></td></tr></table></figure><h4 id="三-渲染form表单"><a href="#三-渲染form表单" class="headerlink" title="三.渲染form表单"></a>三.渲染form表单</h4><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs vim">//field等于说自动解析这串代码的id，name等等属性<br>&lt;form <span class="hljs-keyword">th</span>:action=<span class="hljs-string">&quot;@&#123;/th/postform&#125;&quot;</span> <span class="hljs-keyword">th</span>:object=<span class="hljs-string">&quot;$&#123;user&#125;&quot;</span> method=<span class="hljs-string">&quot;post&quot;</span> <span class="hljs-keyword">th</span>:method=<span class="hljs-string">&quot;post&quot;</span>&gt;<br>    &lt;<span class="hljs-built_in">input</span> <span class="hljs-built_in">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-keyword">th</span>:field=<span class="hljs-string">&quot;*&#123;name&#125;&quot;</span>/&gt;<br>    &lt;<span class="hljs-built_in">input</span> <span class="hljs-built_in">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-keyword">th</span>:field=<span class="hljs-string">&quot;*&#123;age&#125;&quot;</span>/&gt;<br>    &lt;<span class="hljs-built_in">input</span> <span class="hljs-built_in">type</span>=<span class="hljs-string">&quot;submit&quot;</span>/&gt;<br>&lt;/form&gt;<br></code></pre></td></tr></table></figure><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs kotlin"><span class="hljs-meta">@PostMapping(<span class="hljs-meta-string">&quot;postform&quot;</span>)</span><br><span class="hljs-keyword">public</span> String postform(User u) &#123;<br>    <br>    System.<span class="hljs-keyword">out</span>.println(<span class="hljs-string">&quot;姓名：&quot;</span> + u.getName());<br>    System.<span class="hljs-keyword">out</span>.println(<span class="hljs-string">&quot;年龄：&quot;</span> + u.getAge());<br>    <br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;redirect:/th/test&quot;</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="四-text与utext"><a href="#四-text与utext" class="headerlink" title="四.text与utext"></a>四.text与utext</h4><p>后端代码：</p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs reasonml">@<span class="hljs-constructor">RequestMapping(<span class="hljs-string">&quot;test&quot;</span>)</span><br>public String test(ModelMap map)&#123;<br>    User u = <span class="hljs-keyword">new</span> <span class="hljs-constructor">User()</span>;<br>    u.set<span class="hljs-constructor">Name(<span class="hljs-string">&quot;LeeCX&quot;</span>)</span>;<br>    u.set<span class="hljs-constructor">Age(18)</span>;<br>    u.set<span class="hljs-constructor">Password(<span class="hljs-string">&quot;123456&quot;</span>)</span>;<br>    u.set<span class="hljs-constructor">Birthday(<span class="hljs-params">new</span> Date()</span>);<br>    u.set<span class="hljs-constructor">Desc(<span class="hljs-string">&quot;&lt;font color=&#x27;green&#x27;&gt;&lt;b&gt;hello&lt;/b&gt;&lt;/font&gt;&quot;</span>)</span>;<br>    map.add<span class="hljs-constructor">Attribute(<span class="hljs-string">&quot;user&quot;</span>,<span class="hljs-params">u</span>)</span>;<br>    return <span class="hljs-string">&quot;thymeleaf/test&quot;</span><br>&#125;<br></code></pre></td></tr></table></figure><p>前端代码：</p><figure class="highlight dust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs dust"><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">th:text</span>=<span class="hljs-string">&quot;$</span></span></span><span class="hljs-template-variable">&#123;user.desc&#125;</span><span class="xml"><span class="hljs-tag"><span class="hljs-string">&quot;</span>&gt;</span>abc<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span></span><br><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">th:utext</span>=<span class="hljs-string">&quot;$</span></span></span><span class="hljs-template-variable">&#123;user.desc&#125;</span><span class="xml"><span class="hljs-tag"><span class="hljs-string">&quot;</span>&gt;</span>abc<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span></span><br></code></pre></td></tr></table></figure><h4 id="五-URL"><a href="#五-URL" class="headerlink" title="五.URL"></a>五.URL</h4><figure class="highlight dust"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs dust"><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">th:href</span>=<span class="hljs-string">&quot;@</span></span></span><span class="hljs-template-variable">&#123;http://www.imooc.com&#125;</span><span class="xml"><span class="hljs-tag"><span class="hljs-string">&quot;</span>&gt;</span>网站地址<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span></span><br></code></pre></td></tr></table></figure><h4 id="六-引用静态资源文件js-css"><a href="#六-引用静态资源文件js-css" class="headerlink" title="六.引用静态资源文件js/css"></a>六.引用静态资源文件js/css</h4><p>application.properties</p><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs gradle">spring.mvc.<span class="hljs-keyword">static</span>-path-pattern=<span class="hljs-regexp">/static/</span>**<br></code></pre></td></tr></table></figure><p>text.js</p><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs abnf">alert(<span class="hljs-string">&quot;test js&quot;</span>)<span class="hljs-comment">;</span><br></code></pre></td></tr></table></figure><p>test.html</p><figure class="highlight dust"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs dust"><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">th:src</span>=<span class="hljs-string">&quot;@</span></span></span><span class="hljs-template-tag">&#123;/<span class="hljs-name">static</span>/js/test.js&#125;</span><span class="xml"><span class="hljs-tag"><span class="hljs-string">&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br></code></pre></td></tr></table></figure><h4 id="七-th-unless与th：if"><a href="#七-th-unless与th：if" class="headerlink" title="七.th:unless与th：if"></a>七.th:unless与th：if</h4><figure class="highlight dust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs dust"><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">br</span>/&gt;</span></span><br><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">th:if</span>=<span class="hljs-string">&quot;$</span></span></span><span class="hljs-template-variable">&#123;user.age&#125;</span><span class="xml"><span class="hljs-tag"><span class="hljs-string"> == 18&quot;</span>&gt;</span>十八岁的天空<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">th:if</span>=<span class="hljs-string">&quot;$</span></span></span><span class="hljs-template-variable">&#123;user.age&#125;</span><span class="xml"><span class="hljs-tag"><span class="hljs-string"> gt 18&quot;</span>&gt;</span>你老了<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">th:if</span>=<span class="hljs-string">&quot;$</span></span></span><span class="hljs-template-variable">&#123;user.age&#125;</span><span class="xml"><span class="hljs-tag"><span class="hljs-string"> lt 18&quot;</span>&gt;</span>你很年轻<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">th:if</span>=<span class="hljs-string">&quot;$</span></span></span><span class="hljs-template-variable">&#123;user.age&#125;</span><span class="xml"><span class="hljs-tag"><span class="hljs-string"> ge 18&quot;</span>&gt;</span>大于等于<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">th:if</span>=<span class="hljs-string">&quot;$</span></span></span><span class="hljs-template-variable">&#123;user.age&#125;</span><span class="xml"><span class="hljs-tag"><span class="hljs-string"> le 18&quot;</span>&gt;</span>小于等于<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">br</span>/&gt;</span></span><br></code></pre></td></tr></table></figure><h4 id="八-选择框"><a href="#八-选择框" class="headerlink" title="八.选择框"></a>八.选择框</h4><figure class="highlight dust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs dust"><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">br</span>/&gt;</span></span><br><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">select</span>&gt;</span></span><br><span class="xml">     <span class="hljs-tag">&lt;<span class="hljs-name">option</span> &gt;</span>选择框<span class="hljs-tag">&lt;/<span class="hljs-name">option</span>&gt;</span></span><br><span class="xml">     <span class="hljs-tag">&lt;<span class="hljs-name">option</span> <span class="hljs-attr">th:selected</span>=<span class="hljs-string">&quot;$</span></span></span><span class="hljs-template-variable">&#123;user.name <span class="hljs-keyword">eq</span> &#x27;lee&#x27;&#125;</span><span class="xml"><span class="hljs-tag"><span class="hljs-string">&quot;</span>&gt;</span>lee<span class="hljs-tag">&lt;/<span class="hljs-name">option</span>&gt;</span></span><br><span class="xml">     <span class="hljs-tag">&lt;<span class="hljs-name">option</span> <span class="hljs-attr">th:selected</span>=<span class="hljs-string">&quot;$</span></span></span><span class="hljs-template-variable">&#123;user.name <span class="hljs-keyword">eq</span> &#x27;imooc&#x27;&#125;</span><span class="xml"><span class="hljs-tag"><span class="hljs-string">&quot;</span>&gt;</span>imooc<span class="hljs-tag">&lt;/<span class="hljs-name">option</span>&gt;</span></span><br><span class="xml">     <span class="hljs-tag">&lt;<span class="hljs-name">option</span> <span class="hljs-attr">th:selected</span>=<span class="hljs-string">&quot;$</span></span></span><span class="hljs-template-variable">&#123;user.name <span class="hljs-keyword">eq</span> &#x27;LeeCX&#x27;&#125;</span><span class="xml"><span class="hljs-tag"><span class="hljs-string">&quot;</span>&gt;</span>LeeCX<span class="hljs-tag">&lt;/<span class="hljs-name">option</span>&gt;</span></span><br><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span></span><br><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">br</span>/&gt;</span></span><br></code></pre></td></tr></table></figure><h4 id="八-循环：th：each"><a href="#八-循环：th：each" class="headerlink" title="八.循环：th：each"></a>八.循环：th：each</h4><figure class="highlight dust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs dust"><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">table</span>&gt;</span></span><br><span class="xml">    <span class="hljs-tag">&lt;<span class="hljs-name">tr</span>&gt;</span></span><br><span class="xml">        <span class="hljs-tag">&lt;<span class="hljs-name">th</span>&gt;</span>姓名<span class="hljs-tag">&lt;/<span class="hljs-name">th</span>&gt;</span></span><br><span class="xml">        <span class="hljs-tag">&lt;<span class="hljs-name">th</span>&gt;</span>年龄<span class="hljs-tag">&lt;/<span class="hljs-name">th</span>&gt;</span></span><br><span class="xml">        <span class="hljs-tag">&lt;<span class="hljs-name">th</span>&gt;</span>年龄备注<span class="hljs-tag">&lt;/<span class="hljs-name">th</span>&gt;</span></span><br><span class="xml">        <span class="hljs-tag">&lt;<span class="hljs-name">th</span>&gt;</span>生日<span class="hljs-tag">&lt;/<span class="hljs-name">th</span>&gt;</span></span><br><span class="xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span></span><br><span class="xml">    <span class="hljs-tag">&lt;<span class="hljs-name">tr</span> <span class="hljs-attr">th:each</span>=<span class="hljs-string">&quot;person:$</span></span></span><span class="hljs-template-variable">&#123;userList&#125;</span><span class="xml"><span class="hljs-tag"><span class="hljs-string">&quot;</span>&gt;</span></span><br><span class="xml">        <span class="hljs-tag">&lt;<span class="hljs-name">td</span> <span class="hljs-attr">th:text</span>=<span class="hljs-string">&quot;$</span></span></span><span class="hljs-template-variable">&#123;person.name&#125;</span><span class="xml"><span class="hljs-tag"><span class="hljs-string">&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span></span><br><span class="xml">        <span class="hljs-tag">&lt;<span class="hljs-name">td</span> <span class="hljs-attr">th:text</span>=<span class="hljs-string">&quot;$</span></span></span><span class="hljs-template-variable">&#123;person.age&#125;</span><span class="xml"><span class="hljs-tag"><span class="hljs-string">&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span></span><br><span class="xml">        <span class="hljs-tag">&lt;<span class="hljs-name">td</span> <span class="hljs-attr">th:text</span>=<span class="hljs-string">&quot;$</span></span></span><span class="hljs-template-variable">&#123;person.age <span class="hljs-keyword">gt</span> 18&#125;</span><span class="xml"><span class="hljs-tag"><span class="hljs-string"> ? 你老了 : 你很年轻&quot;</span>&gt;</span>18岁<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span></span><br><span class="xml">        <span class="hljs-tag">&lt;<span class="hljs-name">td</span> <span class="hljs-attr">th:text</span>=<span class="hljs-string">&quot;$</span></span></span><span class="hljs-template-tag">&#123;#<span class="hljs-name">dates.format</span>(user.birthday, &#x27;yyyy-MM-dd hh:mm:ss&#x27;)&#125;</span><span class="xml"><span class="hljs-tag"><span class="hljs-string">&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span></span><br><span class="xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span></span><br><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-name">table</span>&gt;</span></span><br><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">br</span>/&gt;</span></span><br></code></pre></td></tr></table></figure><h4 id="十-th：switch与th：case"><a href="#十-th：switch与th：case" class="headerlink" title="十.th：switch与th：case"></a>十.th：switch与th：case</h4><p>1.messages.properies</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--所在路径：src/main/resources/i18n/messages.properties--&gt;</span><br>roles.manager=manager<br>roles.superadmin=superadmin<br></code></pre></td></tr></table></figure><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs applescript"><span class="hljs-built_in">application</span>.properties<br></code></pre></td></tr></table></figure><p>2.所在路径：src/main/resources/application.properties</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs ini"><br><span class="hljs-attr">spring.messages.basename</span>=i18n/messages<br><span class="hljs-attr">spring.messages.cache-seconds</span>=<span class="hljs-number">3600</span><br><span class="hljs-attr">spring.messages.encoding</span>=UTF-<span class="hljs-number">8</span><br><br></code></pre></td></tr></table></figure><p>3.页面</p><figure class="highlight dust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs dust"><span class="xml"><span class="hljs-comment">&lt;!--roles是在资源文件里配置的资源文件</span></span><br><span class="hljs-comment"><span class="xml">设置user.name的属性，根据i18n里面的配置，来判断输出什么内容</span></span><br><span class="hljs-comment"><span class="xml">--&gt;</span></span><br><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">br</span>/&gt;</span></span><br><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">th:switch</span>=<span class="hljs-string">&quot;$</span></span></span><span class="hljs-template-variable">&#123;user.name&#125;</span><span class="xml"><span class="hljs-tag"><span class="hljs-string">&quot;</span>&gt;</span></span><br><span class="xml">  <span class="hljs-tag">&lt;<span class="hljs-name">p</span> <span class="hljs-attr">th:case</span>=<span class="hljs-string">&quot;&#x27;lee&#x27;&quot;</span>&gt;</span>lee<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span></span><br><span class="xml">  <span class="hljs-tag">&lt;<span class="hljs-name">p</span> <span class="hljs-attr">th:case</span>=<span class="hljs-string">&quot;#</span></span></span><span class="hljs-template-variable">&#123;roles.manager&#125;</span><span class="xml"><span class="hljs-tag"><span class="hljs-string">&quot;</span>&gt;</span>普通管理员<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span></span><br><span class="xml">  <span class="hljs-tag">&lt;<span class="hljs-name">p</span> <span class="hljs-attr">th:case</span>=<span class="hljs-string">&quot;#</span></span></span><span class="hljs-template-variable">&#123;roles.superadmin&#125;</span><span class="xml"><span class="hljs-tag"><span class="hljs-string">&quot;</span>&gt;</span>超级管理员<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span></span><br><span class="xml">  <span class="hljs-tag">&lt;<span class="hljs-name">p</span> <span class="hljs-attr">th:case</span>=<span class="hljs-string">&quot;*&quot;</span>&gt;</span>其他用户<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span></span><br><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">br</span>/&gt;</span></span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>springboot</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>页面不刷新</title>
    <link href="/2018/05/12/mobile-refresh/"/>
    <url>/2018/05/12/mobile-refresh/</url>
    
    <content type="html"><![CDATA[<p>今天分享下，在浏览器中点击返回或者前进按钮时，页面不刷新的问题。这个问题存在于移动端居多，尤其是苹果手机。我们一起看看这到底是怎么一回事！   </p><p>如果是移动端下，可能有两种情况：   </p><ul><li><p>第一种是在自己的app下点击返回的时候页面不刷新，这有可能是你们原生开发人员，只是关闭了当前的一个窗口，也就是说那个窗口是新开的。这种解决方案，老夫只能说找你们的原生开发吧。</p></li><li><p>第二种则是在微信、uc这类的浏览器出现，这是因为浏览器保存了DOM和js的状态，相当于保存了整个页面，这种特性称作 “往返缓存”（back-forward cache，或bfcache）。   </p></li></ul><p>对于这种情况可以用“pageshow”事件来解决，“pageshow”事件表示浏览器展示文档的时候触发，并且是在“onload”事件之后触发。如果浏览器是存在往返缓存机制的话，那么onload事件就只会触发一次，而“pageshow”事件则每次都会触发。这里需要注意“pageshow”事件必须绑定在window这个对象中，如下代码：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-built_in">window</span>.addEventListener(<span class="hljs-string">&#x27;pageshow&#x27;</span>, <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">event</span>) </span>&#123;<br>    <span class="hljs-comment">//event.persisted属性为true时，表示当前文档是从往返缓存中获取</span><br>    <span class="hljs-keyword">if</span>(event.persisted) location.reload();  <br>&#125;);<br></code></pre></td></tr></table></figure><p>所以可根据以上方法来让浏览器刷新。</p>]]></content>
    
    
    
    <tags>
      
      <tag>JS</tag>
      
      <tag>前端</tag>
      
      <tag>移动端</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>springmvc常用注解标签 (转)</title>
    <link href="/2018/05/04/2018-05-04-springmvc-comment-tags/"/>
    <url>/2018/05/04/2018-05-04-springmvc-comment-tags/</url>
    
    <content type="html"><![CDATA[<blockquote><p>转自<a href="https://www.cnblogs.com/leskang/p/5445698.html">木叔</a><br>springmvc常用注解标签</p></blockquote><h2 id="1、-Controller"><a href="#1、-Controller" class="headerlink" title="1、@Controller"></a>1、@Controller</h2><p>在SpringMVC 中，控制器Controller 负责处理由DispatcherServlet 分发的请求，它把用户请求的数据经过业务处理层处理之后封装成一个Model ，然后再把该Model 返回给对应的View 进行展示。在SpringMVC 中提供了一个非常简便的定义Controller 的方法，你无需继承特定的类或实现特定的接口，只需使用<code>@Controller</code> 标记一个类是Controller ，然后使用<code>@RequestMapping</code> 和<code>@RequestParam</code> 等一些注解用以定义URL 请求和Controller 方法之间的映射，这样的Controller 就能被外界访问到。此外Controller 不会直接依赖于HttpServletRequest 和HttpServletResponse 等HttpServlet 对象，它们可以通过Controller 的方法参数灵活的获取到。</p><p><code>@Controller</code> 用于标记在一个类上，使用它标记的类就是一个SpringMVC Controller 对象。分发处理器将会扫描使用了该注解的类的方法，并检测该方法是否使用了<code>@RequestMapping</code> 注解。<code>@Controller</code> 只是定义了一个控制器类，而使用<code>@RequestMapping</code> 注解的方法才是真正处理请求的处理器。单单使用<code>@Controller</code> 标记在一个类上还不能真正意义上的说它就是SpringMVC 的一个控制器类，因为这个时候Spring 还不认识它。那么要如何做Spring 才能认识它呢？这个时候就需要我们把这个控制器类交给Spring 来管理。有两种方式：</p><blockquote><p>（1）在SpringMVC 的配置文件中定义MyController 的bean 对象。<br>（2）在SpringMVC 的配置文件中告诉Spring 该到哪里去找标记为@Controller 的Controller 控制器。</p></blockquote><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--方式一--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.host.app.web.controller.MyController&quot;</span>/&gt;</span><br><span class="hljs-comment">&lt;!--方式二--&gt;</span><br>//路径写到controller的上一层(扫描包详解见下面浅析)<br>&lt; context:component-scan base-package = &quot;com.host.app.web&quot; /&gt;<br></code></pre></td></tr></table></figure><h2 id="2、-RequestMapping"><a href="#2、-RequestMapping" class="headerlink" title="2、@RequestMapping"></a>2、@RequestMapping</h2><blockquote><p><code>RequestMapping</code>注解有六个属性，下面我们把她分成三类进行说明（下面有相应示例）。   </p></blockquote><p><code>RequestMapping</code>是一个用来处理请求地址映射的注解，可用于类或方法上。用于类上，表示类中的所有响应请求的方法都是以该地址作为父路径。</p><h4 id="1、-value，-method；"><a href="#1、-value，-method；" class="headerlink" title="1、 value， method；"></a>1、 value， method；</h4><p><code>value</code>：     指定请求的实际地址，指定的地址可以是URI Template 模式（后面将会说明）；</p><p><code>method</code>：  指定请求的method类型， GET、POST、PUT、DELETE等；</p><h4 id="2、consumes，produces"><a href="#2、consumes，produces" class="headerlink" title="2、consumes，produces"></a>2、consumes，produces</h4><p><code>consumes</code>： 指定处理请求的提交内容类型（Content-Type），例如application/json, text/html;</p><p><code>produces</code>:    指定返回的内容类型，仅当request请求头中的(Accept)类型中包含该指定类型才返回；</p><h4 id="3、params，headers"><a href="#3、params，headers" class="headerlink" title="3、params，headers"></a>3、params，headers</h4><p><code>params</code>： 指定request中必须包含某些参数值是，才让该方法处理。</p><p><code>headers</code>： 指定request中必须包含某些指定的header值，才能让该方法处理请求。</p><h2 id="3、-Resource和-Autowired"><a href="#3、-Resource和-Autowired" class="headerlink" title="3、@Resource和@Autowired"></a>3、@Resource和@Autowired</h2><p><code>@Resource</code>和<code>@Autowired</code>都是做bean的注入时使用，其实<code>@Resource</code>并不是Spring的注解，它的包是<code>javax.annotation.Resource</code>，需要导入，但是Spring支持该注解的注入。</p><blockquote><p>1、共同点</p></blockquote><p>两者都可以写在字段和setter方法上。两者如果都写在字段上，那么就不需要再写setter方法。</p><blockquote><p>2、不同点</p></blockquote><h4 id="Autowired"><a href="#Autowired" class="headerlink" title="@Autowired"></a>@Autowired</h4><p><code>@Autowired</code>为Spring提供的注解，需要导入包<code>org.springframework.beans.factory.annotation.Autowired</code>;只按照byType注入。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">TestServiceImpl</span> </span>&#123;<br>    <span class="hljs-comment">// 下面两种@Autowired只要使用一种即可</span><br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> UserDao userDao; <span class="hljs-comment">// 用于字段上</span><br><br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setUserDao</span><span class="hljs-params">(UserDao userDao)</span> </span>&#123; <span class="hljs-comment">// 用于属性的方法上</span><br>        <span class="hljs-keyword">this</span>.userDao = userDao;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><code>@Autowired</code>注解是按照类型（byType）装配依赖对象，默认情况下它要求依赖对象必须存在，如果允许null值，可以设置它的required属性为false。如果我们想使用按照名称（byName）来装配，可以结合@Qualifier注解一起使用。如下：</p><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs less"><span class="hljs-selector-tag">public</span> <span class="hljs-selector-tag">class</span> <span class="hljs-selector-tag">TestServiceImpl</span> &#123;<br>    <span class="hljs-variable">@Autowired</span><br>    <span class="hljs-variable">@Qualifier</span>(<span class="hljs-string">&quot;userDao&quot;</span>)<br>    private UserDao userDao;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="Resource"><a href="#Resource" class="headerlink" title="@Resource"></a>@Resource</h4><p><code>@Resource</code>默认按照ByName自动注入，由J2EE提供，需要导入包<code>javax.annotation.Resource</code>。<code>@Resource</code>有两个重要的属性：name和type，而Spring将<code>@Resource</code>注解的name属性解析为bean的名字，而type属性则解析为bean的类型。所以，如果使用name属性，则使用byName的自动注入策略，而使用type属性时则使用byType自动注入策略。如果既不制定name也不制定type属性，这时将通过反射机制使用byName自动注入策略。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">TestServiceImpl</span> </span>&#123;<br>    <span class="hljs-comment">// 下面两种@Resource只要使用一种即可</span><br>    <span class="hljs-meta">@Resource(name=&quot;userDao&quot;)</span><br>    <span class="hljs-keyword">private</span> UserDao userDao; <span class="hljs-comment">// 用于字段上</span><br><br>    <span class="hljs-meta">@Resource(name=&quot;userDao&quot;)</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setUserDao</span><span class="hljs-params">(UserDao userDao)</span> </span>&#123; <span class="hljs-comment">// 用于属性的setter方法上</span><br>        <span class="hljs-keyword">this</span>.userDao = userDao;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>注：最好是将@Resource放在setter方法上，因为这样更符合面向对象的思想，通过set、get去操作属性，而不是直接去操作属性。</p><h4 id="Resource装配顺序"><a href="#Resource装配顺序" class="headerlink" title="@Resource装配顺序"></a>@Resource装配顺序</h4><ol><li>如果同时指定了name和type，则从Spring上下文中找到唯一匹配的bean进行装配，找不到则抛出异常。</li></ol><ul><li><p>如果指定了name，则从上下文中查找名称（id）匹配的bean进行装配，找不到则抛出异常。</p></li><li><p>如果指定了type，则从上下文中找到类似匹配的唯一bean进行装配，找不到或是找到多个，都会抛出异常。</p></li><li><p>如果既没有指定name，又没有指定type，则自动按照byName方式进行装配；如果没有匹配，则回退为一个原始类型进行匹配，如果匹配则自动装配。</p></li></ul><p><code>@Resource</code>的作用相当于<code>@Autowired</code>，只不过<code>@Autowired</code>按照byType自动注入。</p><h2 id="4、-ModelAttribute和-SessionAttributes"><a href="#4、-ModelAttribute和-SessionAttributes" class="headerlink" title="4、@ModelAttribute和 @SessionAttributes"></a>4、@ModelAttribute和 @SessionAttributes</h2><p>代表的是：该Controller的所有方法在调用前，先执行此<code>@ModelAttribute</code>方法，可用于注解和方法参数中，可以把这个<code>@ModelAttribute</code>特性，应用在BaseController当中，所有的Controller继承BaseController，即可实现在调用Controller时，先执行<code>@ModelAttribute</code>方法。</p><p><code>@SessionAttributes</code>即将值放到session作用域中，写在class上面。</p><p>具体示例参见下面：使用 <code>@ModelAttribute</code> 和 <code>@SessionAttributes</code> 传递和保存数据</p><h2 id="5、-PathVariable"><a href="#5、-PathVariable" class="headerlink" title="5、@PathVariable"></a>5、@PathVariable</h2><p>用于将请求URL中的模板变量映射到功能处理方法的参数上，即取出uri模板中的变量作为参数。如：</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-meta">@Controller</span>  <br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">TestController</span> </span>&#123;  <br>     <span class="hljs-meta">@RequestMapping</span>(value=<span class="hljs-string">&quot;/user/&#123;userId&#125;/roles/&#123;roleId&#125;&quot;</span>,method = RequestMethod.GET)  <br>     <span class="hljs-keyword">public</span> <span class="hljs-built_in">String</span> <span class="hljs-function"><span class="hljs-title">getLogin</span>(<span class="hljs-params"><span class="hljs-meta">@PathVariable</span>(<span class="hljs-string">&quot;userId&quot;</span>) <span class="hljs-built_in">String</span> userId,  </span></span><br><span class="hljs-params"><span class="hljs-function">         <span class="hljs-meta">@PathVariable</span>(<span class="hljs-string">&quot;roleId&quot;</span>) <span class="hljs-built_in">String</span> roleId</span>)</span>&#123;  <br>         System.out.println(<span class="hljs-string">&quot;User Id : &quot;</span> + userId);  <br>         System.out.println(<span class="hljs-string">&quot;Role Id : &quot;</span> + roleId);  <br>         <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;hello&quot;</span>;  <br>     &#125;  <br>     <span class="hljs-meta">@RequestMapping</span>(value=<span class="hljs-string">&quot;/product/&#123;productId&#125;&quot;</span>,method = RequestMethod.GET)  <br>     <span class="hljs-keyword">public</span> <span class="hljs-built_in">String</span> <span class="hljs-function"><span class="hljs-title">getProduct</span>(<span class="hljs-params"><span class="hljs-meta">@PathVariable</span>(<span class="hljs-string">&quot;productId&quot;</span>) <span class="hljs-built_in">String</span> productId</span>)</span>&#123;  <br>           System.out.println(<span class="hljs-string">&quot;Product Id : &quot;</span> + productId);  <br>           <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;hello&quot;</span>;  <br>     &#125;  <br>     <span class="hljs-meta">@RequestMapping</span>(value=<span class="hljs-string">&quot;/javabeat/&#123;regexp1:[a-z-]+&#125;&quot;</span>,  <br>           method = RequestMethod.GET)  <br>     <span class="hljs-keyword">public</span> <span class="hljs-built_in">String</span> <span class="hljs-function"><span class="hljs-title">getRegExp</span>(<span class="hljs-params"><span class="hljs-meta">@PathVariable</span>(<span class="hljs-string">&quot;regexp1&quot;</span>) <span class="hljs-built_in">String</span> regexp1</span>)</span>&#123;  <br>           System.out.println(<span class="hljs-string">&quot;URI Part 1 : &quot;</span> + regexp1);  <br>           <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;hello&quot;</span>;  <br>     &#125;  <br>&#125;<br></code></pre></td></tr></table></figure><h2 id="6、-requestParam"><a href="#6、-requestParam" class="headerlink" title="6、@requestParam"></a>6、@requestParam</h2><p><code>@requestParam</code>主要用于在SpringMVC后台控制层获取参数，类似一种是<code>request.getParameter(&quot;name&quot;)</code>，它有三个常用参数：<code>defaultValue = &quot;0&quot;</code>, <code>required = false</code>, <code>value = &quot;isApp&quot;</code>；defaultValue 表示设置默认值，required 铜过boolean设置是否是必须要传入的参数，value 值表示接受的传入的参数类型。</p><h2 id="7、-ResponseBody"><a href="#7、-ResponseBody" class="headerlink" title="7、@ResponseBody"></a>7、@ResponseBody</h2><p>作用： 该注解用于将Controller的方法返回的对象，通过适当的<code>HttpMessageConverter</code>转换为指定格式后，写入到Response对象的body数据区。</p><p>使用时机：返回的数据不是html标签的页面，而是其他某种格式的数据时（如json、xml等）使用；</p><h2 id="8、-Component"><a href="#8、-Component" class="headerlink" title="8、@Component"></a>8、@Component</h2><p>相当于通用的注解，当不知道一些类归到哪个层时使用，但是不建议。</p><h2 id="9、-Repository"><a href="#9、-Repository" class="headerlink" title="9、@Repository"></a>9、@Repository</h2><p>用于注解dao层，在daoImpl类上面注解。</p><h4 id="1、使用-RequestMapping-来映射-Request-请求与处理器"><a href="#1、使用-RequestMapping-来映射-Request-请求与处理器" class="headerlink" title="1、使用 @RequestMapping 来映射 Request 请求与处理器"></a>1、使用 <code>@RequestMapping</code> 来映射 Request 请求与处理器</h4><blockquote><p>方式一、通过常见的类路径和方法路径结合访问controller方法<br>方式二、使用uri模板</p></blockquote><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-meta">@Controller</span><br><span class="hljs-meta">@RequestMapping</span> ( <span class="hljs-string">&quot;/test/&#123;variable1&#125;&quot;</span> )<br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MyController</span> </span>&#123;<br><br>    <span class="hljs-meta">@RequestMapping</span> ( <span class="hljs-string">&quot;/showView/&#123;variable2&#125;&quot;</span> )<br>    <span class="hljs-keyword">public</span> ModelAndView <span class="hljs-function"><span class="hljs-title">showView</span>(<span class="hljs-params"> <span class="hljs-meta">@PathVariable</span> <span class="hljs-built_in">String</span> variable1, <span class="hljs-meta">@PathVariable</span> ( <span class="hljs-string">&quot;variable2&quot;</span> ) int variable2</span>)</span> &#123;<br>       ModelAndView modelAndView = <span class="hljs-keyword">new</span> ModelAndView();<br>       modelAndView.setViewName( <span class="hljs-string">&quot;viewName&quot;</span> );<br>       modelAndView.addObject( <span class="hljs-string">&quot; 需要放到 model 中的属性名称 &quot;</span> , <span class="hljs-string">&quot; 对应的属性值，它是一个对象 &quot;</span> );<br>       <span class="hljs-keyword">return</span> modelAndView;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>URI 模板就是在URI 中给定一个变量，然后在映射的时候动态的给该变量赋值。如URI 模板<a href="http://localhost/app/%7Bvariable1%7D/index.html">http://localhost/app/{variable1}/index.html</a> ，这个模板里面包含一个变量variable1 ，那么当我们请求<a href="http://localhost/app/hello/index.html">http://localhost/app/hello/index.html</a> 的时候，该URL 就跟模板相匹配，只是把模板中的variable1 用hello 来取代。这个变量在SpringMVC 中是使用@PathVariable 来标记的。在SpringMVC 中，我们可以使用@PathVariable 来标记一个Controller 的处理方法参数，表示该参数的值将使用URI 模板中对应的变量的值来赋值。</p><p>代码中我们定义了两个URI 变量，一个是控制器类上的variable1 ，一个是showView 方法上的variable2 ，然后在showView 方法的参数里面使用@PathVariable 标记使用了这两个变量。所以当我们使用/test/hello/showView/2.do 来请求的时候就可以访问到MyController 的showView 方法，这个时候variable1 就被赋予值hello ，variable2 就被赋予值2 ，然后我们在showView 方法参数里面标注了参数variable1 和variable2 是来自访问路径的path 变量，这样方法参数variable1 和variable2 就被分别赋予hello 和2 。方法参数variable1 是定义为String 类型，variable2 是定义为int 类型，像这种简单类型在进行赋值的时候Spring 是会帮我们自动转换的。</p><p>在上面的代码中我们可以看到在标记variable1 为path 变量的时候我们使用的是@PathVariable ，而在标记variable2 的时候使用的是@PathVariable(“variable2”) 。这两者有什么区别呢？<code>第一种情况就默认去URI 模板中找跟参数名相同的变量，但是这种情况只有在使用debug 模式进行编译的时候才可以，而第二种情况是明确规定使用的就是URI 模板中的variable2 变量。当不是使用debug 模式进行编译，或者是所需要使用的变量名跟参数名不相同的时候，就要使用第二种方式明确指出使用的是URI 模板中的哪个变量。</code></p><p> 除了在请求路径中使用URI 模板，定义变量之外，@RequestMapping 中还支持通配符“* ”。如下面的代码我就可以使用/myTest/whatever/wildcard.do 访问到Controller 的testWildcard 方法。如：</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-meta">@Controller</span><br><span class="hljs-meta">@RequestMapping</span> ( <span class="hljs-string">&quot;/myTest&quot;</span> )<br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MyController</span> </span>&#123;<br>    <span class="hljs-meta">@RequestMapping</span> ( <span class="hljs-string">&quot;*/wildcard&quot;</span> )<br>    <span class="hljs-keyword">public</span> <span class="hljs-built_in">String</span> <span class="hljs-function"><span class="hljs-title">testWildcard</span>(<span class="hljs-params"></span>)</span> &#123;<br>       System. out .println( <span class="hljs-string">&quot;wildcard------------&quot;</span> );<br>       <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;wildcard&quot;</span> ;<br>    &#125;  <br>&#125;<br></code></pre></td></tr></table></figure><p>当<code>@RequestParam</code>中没有指定参数名称时，Spring 在代码是debug 编译的情况下会默认取更方法参数同名的参数，如果不是debug 编译的就会报错。</p><h4 id="2、使用-RequestMapping-的一些高级用法"><a href="#2、使用-RequestMapping-的一些高级用法" class="headerlink" title="2、使用 @RequestMapping 的一些高级用法"></a>2、使用 <code>@RequestMapping</code> 的一些高级用法</h4><blockquote><p>params属性   </p></blockquote><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-meta">@RequestMapping</span> (value= <span class="hljs-string">&quot;testParams&quot;</span> , params=&#123; <span class="hljs-string">&quot;param1=value1&quot;</span> , <span class="hljs-string">&quot;param2&quot;</span> , <span class="hljs-string">&quot;!param3&quot;</span> &#125;)<br>    <span class="hljs-keyword">public</span> <span class="hljs-built_in">String</span> <span class="hljs-function"><span class="hljs-title">testParams</span>(<span class="hljs-params"></span>)</span> &#123;<br>       System. out .println( <span class="hljs-string">&quot;test Params...........&quot;</span> );<br>       <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;testParams&quot;</span> ;<br>    &#125;<br></code></pre></td></tr></table></figure><p>用@RequestMapping 的params 属性指定了三个参数，这些参数都是针对请求参数而言的，它们分别表示参数param1 的值必须等于value1 ，参数param2 必须存在，值无所谓，参数param3 必须不存在，只有当请求/testParams.do 并且满足指定的三个参数条件的时候才能访问到该方法。所以当请求/testParams.do?param1=value1&amp;param2=value2 的时候能够正确访问到该testParams 方法，当请求/testParams.do?param1=value1&amp;param2=value2&amp;param3=value3 的时候就不能够正常的访问到该方法，因为在@RequestMapping 的params 参数里面指定了参数param3 是不能存在的。</p><blockquote><p>method属性   </p></blockquote><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-meta">@RequestMapping</span> (value= <span class="hljs-string">&quot;testMethod&quot;</span> , method=&#123;RequestMethod. GET , RequestMethod. DELETE &#125;)<br>    <span class="hljs-keyword">public</span> <span class="hljs-built_in">String</span> <span class="hljs-function"><span class="hljs-title">testMethod</span>(<span class="hljs-params"></span>)</span> &#123;<br>       <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;method&quot;</span> ;<br>    &#125;<br></code></pre></td></tr></table></figure><p>在上面的代码中就使用method 参数限制了以GET 或DELETE 方法请求/testMethod 的时候才能访问到该Controller 的testMethod 方法。</p><blockquote><p>headers属性  </p></blockquote><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-meta">@RequestMapping</span> (value= <span class="hljs-string">&quot;testHeaders&quot;</span> , headers=&#123; <span class="hljs-string">&quot;host=localhost&quot;</span> , <span class="hljs-string">&quot;Accept&quot;</span> &#125;)<br>    <span class="hljs-keyword">public</span> <span class="hljs-built_in">String</span> <span class="hljs-function"><span class="hljs-title">testHeaders</span>(<span class="hljs-params"></span>)</span> &#123;<br>       <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;headers&quot;</span> ;<br>    &#125;<br></code></pre></td></tr></table></figure><p>headers 属性的用法和功能与params 属性相似。在上面的代码中当请求/testHeaders.do 的时候只有当请求头包含Accept 信息，且请求的host 为localhost 的时候才能正确的访问到testHeaders 方法。</p><h4 id="3、-RequestMapping-标记的处理器方法支持的方法参数和返回类型"><a href="#3、-RequestMapping-标记的处理器方法支持的方法参数和返回类型" class="headerlink" title="3、 @RequestMapping 标记的处理器方法支持的方法参数和返回类型"></a>3、 @RequestMapping 标记的处理器方法支持的方法参数和返回类型</h4><h6 id="1-支持的方法参数类型"><a href="#1-支持的方法参数类型" class="headerlink" title="1. 支持的方法参数类型"></a>1. 支持的方法参数类型</h6><p>   （1 ）HttpServlet 对象，主要包括HttpServletRequest 、HttpServletResponse 和HttpSession 对象。 这些参数Spring 在调用处理器方法的时候会自动给它们赋值，所以当在处理器方法中需要使用到这些对象的时候，可以直接在方法上给定一个方法参数的申明，然后在方法体里面直接用就可以了。但是有一点需要注意的是在使用HttpSession 对象的时候，如果此时HttpSession 对象还没有建立起来的话就会有问题。</p><p>   （2 ）Spring 自己的WebRequest 对象。 使用该对象可以访问到存放在HttpServletRequest 和HttpSession 中的属性值。</p><p>   （3 ）InputStream 、OutputStream 、Reader 和Writer 。 InputStream 和Reader 是针对HttpServletRequest 而言的，可以从里面取数据；OutputStream 和Writer 是针对HttpServletResponse 而言的，可以往里面写数据。</p><p>   （4 ）使用@PathVariable 、@RequestParam 、@CookieValue 和@RequestHeader 标记的参数。</p><p>   （5 ）使用@ModelAttribute 标记的参数。</p><p>   （6 ）java.util.Map 、Spring 封装的Model 和ModelMap 。 这些都可以用来封装模型数据，用来给视图做展示。</p><p>   （7 ）实体类。 可以用来接收上传的参数。</p><p>   （8 ）Spring 封装的MultipartFile 。 用来接收上传文件的。</p><p>   （9 ）Spring 封装的Errors 和BindingResult 对象。 这两个对象参数必须紧接在需要验证的实体对象参数之后，它里面包含了实体对象的验证结果。</p><h6 id="2-支持的返回类型"><a href="#2-支持的返回类型" class="headerlink" title="2. 支持的返回类型"></a>2. 支持的返回类型</h6><p>   （1 ）一个包含模型和视图的ModelAndView 对象。</p><p>   （2 ）一个模型对象，这主要包括Spring 封装好的Model 和ModelMap ，以及java.util.Map ，当没有视图返回的时候视图名称将由RequestToViewNameTranslator 来决定。</p><p>   （3 ）一个View 对象。这个时候如果在渲染视图的过程中模型的话就可以给处理器方法定义一个模型参数，然后在方法体里面往模型中添加值。</p><p>   （4 ）一个String 字符串。这往往代表的是一个视图名称。这个时候如果需要在渲染视图的过程中需要模型的话就可以给处理器方法一个模型参数，然后在方法体里面往模型中添加值就可以了。</p><p>   （5 ）返回值是void 。这种情况一般是我们直接把返回结果写到HttpServletResponse 中了，如果没有写的话，那么Spring 将会利用RequestToViewNameTranslator 来返回一个对应的视图名称。如果视图中需要模型的话，处理方法与返回字符串的情况相同。</p><p>   （6 ）如果处理器方法被注解@ResponseBody 标记的话，那么处理器方法的任何返回类型都会通过HttpMessageConverters 转换之后写到HttpServletResponse 中，而不会像上面的那些情况一样当做视图或者模型来处理。</p><p>   （7 ）除以上几种情况之外的其他任何返回类型都会被当做模型中的一个属性来处理，而返回的视图还是由RequestToViewNameTranslator 来决定，添加到模型中的属性名称可以在该方法上用@ModelAttribute(“attributeName”) 来定义，否则将使用返回类型的类名称的首字母小写形式来表示。使用@ModelAttribute 标记的方法会在@RequestMapping 标记的方法执行之前执行。</p><h4 id="4、使用-ModelAttribute-和-SessionAttributes-传递和保存数据"><a href="#4、使用-ModelAttribute-和-SessionAttributes-传递和保存数据" class="headerlink" title="4、使用 @ModelAttribute 和 @SessionAttributes 传递和保存数据"></a>4、使用 @ModelAttribute 和 @SessionAttributes 传递和保存数据</h4><p>SpringMVC 支持使用 @ModelAttribute 和 @SessionAttributes 在不同的模型（model）和控制器之间共享数据。 @ModelAttribute 主要有两种使用方式，一种是标注在方法上，一种是标注在 Controller 方法参数上。</p><p>当 @ModelAttribute 标记在方法上的时候，该方法将在处理器方法执行之前执行，然后把返回的对象存放在 session 或模型属性中，属性名称可以使用 @ModelAttribute(“attributeName”) 在标记方法的时候指定，若未指定，则使用返回类型的类名称（首字母小写）作为属性名称。关于 @ModelAttribute 标记在方法上时对应的属性是存放在 session 中还是存放在模型中，我们来做一个实验，看下面一段代码。</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">@Controller<br>@RequestMapping ( &quot;/myTest&quot; )<br><span class="hljs-built_in">public</span> <span class="hljs-keyword">class</span> MyController &#123;<br><br>    @ModelAttribute ( &quot;hello&quot; )<br>    <span class="hljs-built_in">public</span> String getModel() &#123;<br>       <span class="hljs-keyword">System</span>. <span class="hljs-keyword">out</span> .println( &quot;-------------Hello---------&quot; );<br>       <span class="hljs-keyword">return</span> &quot;world&quot; ;<br>    &#125;<br><br>    @ModelAttribute ( &quot;intValue&quot; )<br>    <span class="hljs-built_in">public</span> <span class="hljs-type">int</span> getInteger() &#123;<br>       <span class="hljs-keyword">System</span>. <span class="hljs-keyword">out</span> .println( &quot;-------------intValue---------------&quot; );<br>       <span class="hljs-keyword">return</span> <span class="hljs-number">10</span>;<br>    &#125;<br><br>    @RequestMapping ( &quot;sayHello&quot; )<br>    <span class="hljs-built_in">public</span> <span class="hljs-type">void</span> sayHello( @ModelAttribute ( &quot;hello&quot; ) String hello, @ModelAttribute ( &quot;intValue&quot; ) <span class="hljs-type">int</span> num, @ModelAttribute ( &quot;user2&quot; ) <span class="hljs-keyword">User</span> <span class="hljs-keyword">user</span>, Writer writer, HttpSession <span class="hljs-keyword">session</span>) throws IOException &#123;<br>       writer.<span class="hljs-keyword">write</span>( &quot;Hello &quot; + hello + &quot; , Hello &quot; + <span class="hljs-keyword">user</span>.getUsername() + num);<br>       writer.<span class="hljs-keyword">write</span>( &quot;\r&quot; );<br>       Enumeration enume = <span class="hljs-keyword">session</span>.getAttributeNames();<br>       <span class="hljs-keyword">while</span> (enume.hasMoreElements())<br>           writer.<span class="hljs-keyword">write</span>(enume.nextElement() + &quot;\r&quot; );<br>    &#125;<br><br>    @ModelAttribute ( &quot;user2&quot; )<br>    <span class="hljs-built_in">public</span> <span class="hljs-keyword">User</span> getUser()&#123;<br>       <span class="hljs-keyword">System</span>. <span class="hljs-keyword">out</span> .println( &quot;---------getUser-------------&quot; );<br>       <span class="hljs-keyword">return</span> <span class="hljs-built_in">new</span> <span class="hljs-keyword">User</span>(<span class="hljs-number">3</span>, &quot;user2&quot; );<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>当我们请求 <code>/myTest/sayHello.do</code> 的时候使用 <code>@ModelAttribute</code> 标记的方法会先执行，然后把它们返回的对象存放到模型中。最终访问到 <code>sayHello</code> 方法的时候，使用 <code>@ModelAttribute</code> 标记的方法参数都能被正确的注入值。执行结果如下所示：</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">Hello</span> world,Hello user<span class="hljs-number">210</span><br></code></pre></td></tr></table></figure><p>由执行结果我们可以看出来，此时 session 中没有包含任何属性，也就是说上面的那些对象都是存放在模型属性中，而不是存放在 session 属性中。那要如何才能存放在 session 属性中呢？这个时候我们先引入一个新的概念 @SessionAttributes ，它的用法会在讲完 @ModelAttribute 之后介绍，这里我们就先拿来用一下。我们在 MyController 类上加上 @SessionAttributes 属性标记哪些是需要存放到 session 中的。看下面的代码：</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">@Controller<br>@RequestMapping ( &quot;/myTest&quot; )<br>@SessionAttributes (<span class="hljs-keyword">value</span>=&#123; &quot;intValue&quot; , &quot;stringValue&quot; &#125;, <span class="hljs-keyword">types</span>=&#123;<span class="hljs-keyword">User</span>. <span class="hljs-keyword">class</span> &#125;)<br><span class="hljs-built_in">public</span> <span class="hljs-keyword">class</span> MyController &#123;<br><br>    @ModelAttribute ( &quot;hello&quot; )<br>    <span class="hljs-built_in">public</span> String getModel() &#123;<br>       <span class="hljs-keyword">System</span>. <span class="hljs-keyword">out</span> .println( &quot;-------------Hello---------&quot; );<br>       <span class="hljs-keyword">return</span> &quot;world&quot; ;<br>    &#125;<br><br>    @ModelAttribute ( &quot;intValue&quot; )<br>    <span class="hljs-built_in">public</span> <span class="hljs-type">int</span> getInteger() &#123;<br>       <span class="hljs-keyword">System</span>. <span class="hljs-keyword">out</span> .println( &quot;-------------intValue---------------&quot; );<br>       <span class="hljs-keyword">return</span> <span class="hljs-number">10</span>;<br>    &#125;<br><br>    @RequestMapping ( &quot;sayHello&quot; )<br>    <span class="hljs-built_in">public</span> <span class="hljs-type">void</span> sayHello(Map&lt;String, <span class="hljs-keyword">Object</span>&gt; map, @ModelAttribute ( &quot;hello&quot; ) String hello, @ModelAttribute ( &quot;intValue&quot; ) <span class="hljs-type">int</span> num, @ModelAttribute ( &quot;user2&quot; ) <span class="hljs-keyword">User</span> <span class="hljs-keyword">user</span>, Writer writer, HttpServletRequest request) throws IOException &#123;<br>       map.put( &quot;stringValue&quot; , &quot;String&quot; );<br>       writer.<span class="hljs-keyword">write</span>( &quot;Hello &quot; + hello + &quot; , Hello &quot; + <span class="hljs-keyword">user</span>.getUsername() + num);<br>       writer.<span class="hljs-keyword">write</span>( &quot;\r&quot; );<br>       HttpSession <span class="hljs-keyword">session</span> = request.getSession();<br>       Enumeration enume = <span class="hljs-keyword">session</span>.getAttributeNames();<br>       <span class="hljs-keyword">while</span> (enume.hasMoreElements())<br>           writer.<span class="hljs-keyword">write</span>(enume.nextElement() + &quot;\r&quot; );<br>       <span class="hljs-keyword">System</span>. <span class="hljs-keyword">out</span> .println(<span class="hljs-keyword">session</span>);<br>    &#125;<br><br>    @ModelAttribute ( &quot;user2&quot; )<br>    <span class="hljs-built_in">public</span> <span class="hljs-keyword">User</span> getUser() &#123;<br>       <span class="hljs-keyword">System</span>. <span class="hljs-keyword">out</span> .println( &quot;---------getUser-------------&quot; );<br>       <span class="hljs-keyword">return</span> <span class="hljs-built_in">new</span> <span class="hljs-keyword">User</span>(<span class="hljs-number">3</span>, &quot;user2&quot; );<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>在上面代码中我们指定了属性为 <code>intValue</code> 或 <code>stringValue</code> 或者类型为 <code>User</code> 的都会放到 <code>Session</code> 中，利用上面的代码当我们访问 <code>/myTest/sayHello.do</code> 的时候，结果如下：</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">Hello</span> world,Hello user<span class="hljs-number">210</span><br></code></pre></td></tr></table></figure><p>仍然没有打印出任何 session 属性，这是怎么回事呢？怎么定义了把模型中属性名为 intValue 的对象和类型为 User 的对象存到 session 中，而实际上没有加进去呢？难道我们错啦？我们当然没有错，只是在第一次访问 /myTest/sayHello.do 的时候 @SessionAttributes 定义了需要存放到 session 中的属性，而且这个模型中也有对应的属性，但是这个时候还没有加到 session 中，所以 session 中不会有任何属性，等处理器方法执行完成后 Spring 才会把模型中对应的属性添加到 session 中。所以当请求第二次的时候就会出现如下结果：</p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs angelscript"> Hello world,Hello user210<br><br>user2<br><br><span class="hljs-built_in">int</span>Value<br><br><span class="hljs-built_in">string</span>Value<br></code></pre></td></tr></table></figure><p>当 @ModelAttribute 标记在处理器方法参数上的时候，表示该参数的值将从模型或者 Session 中取对应名称的属性值，该名称可以通过 @ModelAttribute(“attributeName”) 来指定，若未指定，则使用参数类型的类名称（首字母小写）作为属性名称。<br>5、@PathVariable和@RequestParam的区别</p><p>请求路径上有个id的变量值，可以通过@PathVariable来获取  @RequestMapping(value = “/page/{id}”, method = RequestMethod.GET)<br>@RequestParam用来获得静态的URL请求入参     spring注解时action里用到。<br>简介：</p><p>handler method 参数绑定常用的注解,我们根据他们处理的Request的不同内容部分分为四类：（主要讲解常用类型）</p><p>A、处理requet uri 部分（这里指uri template中variable，不含queryString部分）的注解：   @PathVariable;</p><p>B、处理request header部分的注解：   @RequestHeader, @CookieValue;</p><p>C、处理request body部分的注解：@RequestParam,  @RequestBody;</p><p>D、处理attribute类型是注解： @SessionAttributes, @ModelAttribute;<br>（1）、@PathVariable</p><p>当使用@RequestMapping URI template 样式映射时， 即 someUrl/{paramId}, 这时的paramId可通过 @Pathvariable注解绑定它传过来的值到方法的参数上。</p><p>示例代码：</p><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs less"><span class="hljs-variable">@Controller</span>  <br><span class="hljs-variable">@RequestMapping</span>(<span class="hljs-string">&quot;/owners/&#123;ownerId&#125;&quot;</span>)  <br>public class RelativePathUriTemplateController &#123;  <br><br>  <span class="hljs-variable">@RequestMapping</span>(<span class="hljs-string">&quot;/pets/&#123;petId&#125;&quot;</span>)  <br>  public void findPet(<span class="hljs-variable">@PathVariable</span> String ownerId, <span class="hljs-variable">@PathVariable</span> String petId, Model model) &#123;      <br>    <span class="hljs-comment">// implementation omitted   </span><br>  &#125;  <br>&#125;<br></code></pre></td></tr></table></figure><p>上面代码把URI template 中变量 ownerId的值和petId的值，绑定到方法的参数上。若方法参数名称和需要绑定的uri template中变量名称不一致，需要在@PathVariable(“name”)指定uri template中的名称。<br>（2）、 @RequestHeader、@CookieValue</p><p>@RequestHeader 注解，可以把Request请求header部分的值绑定到方法的参数上。</p><p>示例代码：</p><p>这是一个Request 的header部分：</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs typescript">Host                    localhost:<span class="hljs-number">8080</span>  <br>Accept                  text/html,application/xhtml+xml,application/xml;q=<span class="hljs-number">0.9</span>  <br>Accept-Language         fr,en-gb;q=<span class="hljs-number">0.7</span>,en;q=<span class="hljs-number">0.3</span>  <br>Accept-Encoding         gzip,deflate  <br>Accept-Charset          ISO-<span class="hljs-number">8859</span>-<span class="hljs-number">1</span>,utf-<span class="hljs-number">8</span>;q=<span class="hljs-number">0.7</span>,*;q=<span class="hljs-number">0.7</span>  <br>Keep-Alive              <span class="hljs-number">300</span>  <br><br><span class="hljs-meta">@RequestMapping</span>(<span class="hljs-string">&quot;/displayHeaderInfo.do&quot;</span>)  <br><br><span class="hljs-keyword">public</span> <span class="hljs-built_in">void</span> <span class="hljs-function"><span class="hljs-title">displayHeaderInfo</span>(<span class="hljs-params"><span class="hljs-meta">@RequestHeader</span>(<span class="hljs-string">&quot;Accept-Encoding&quot;</span>) <span class="hljs-built_in">String</span> encoding,  </span></span><br><span class="hljs-params"><span class="hljs-function">                              <span class="hljs-meta">@RequestHeader</span>(<span class="hljs-string">&quot;Keep-Alive&quot;</span>) long keepAlive</span>)</span>  &#123;  <br>&#125;  <br></code></pre></td></tr></table></figure><p>上面的代码，把request header部分的 Accept-Encoding的值，绑定到参数encoding上了， Keep-Alive header的值绑定到参数keepAlive上。</p><p>@CookieValue 可以把Request header中关于cookie的值绑定到方法的参数上。</p><p>例如有如下Cookie值：</p><p>　　JSESSIONID=415A4AC178C59DACE0B2C9CA727CDD84</p><p>@RequestMapping(“/displayHeaderInfo.do”)<br>public void displayHeaderInfo(@CookieValue(“JSESSIONID”) String cookie)  {<br>}</p><p>即把JSESSIONID的值绑定到参数cookie上。<br>（3）、@RequestParam, @RequestBody</p><p>@RequestParam</p><p>A） 常用来处理简单类型的绑定，通过Request.getParameter() 获取的String可直接转换为简单类型的情况（ String–&gt; 简单类型的转换操作由ConversionService配置的转换器来完成）；因为使用request.getParameter()方式获取参数，所以可以处理get 方式中queryString的值，也可以处理post方式中 body data的值；</p><p>B）用来处理Content-Type: 为 application/x-www-form-urlencoded编码的内容，提交方式GET、POST；</p><p>C) 该注解有两个属性： value、required； value用来指定要传入值的id名称，required用来指示参数是否必须绑定；</p><p>示例代码：<br>复制代码</p><p>@Controller<br>@RequestMapping(“/pets”)<br>@SessionAttributes(“pet”)<br>public class EditPetForm {<br>    @RequestMapping(method = RequestMethod.GET)<br> public String setupForm(@RequestParam(“petId”) int petId, ModelMap model) {<br>       Pet pet = this.clinic.loadPet(petId);<br>   model.addAttribute(“pet”, pet);<br>   return “petForm”;<br>   }<br>}</p><p>复制代码</p><p>@RequestBody</p><p>该注解常用来处理Content-Type: 不是application/x-www-form-urlencoded编码的内容，例如application/json, application/xml等；</p><p>它是通过使用HandlerAdapter 配置的HttpMessageConverters来解析post data body，然后绑定到相应的bean上的。</p><p>因为配置有FormHttpMessageConverter，所以也可以用来处理 application/x-www-form-urlencoded的内容，处理完的结果放在一个MultiValueMap&lt;String, String&gt;里，这种情况在某些特殊需求下使用，详情查看FormHttpMessageConverter api;</p><p>示例代码：</p><p>@RequestMapping(value = “/something”, method = RequestMethod.PUT)<br>public void handle(@RequestBody String body, Writer writer) throws IOException {<br>  writer.write(body);<br>}</p><p>（4）、@SessionAttributes, @ModelAttribute</p><p>@SessionAttributes:</p><p>该注解用来绑定HttpSession中的attribute对象的值，便于在方法中的参数里使用。</p><p>该注解有value、types两个属性，可以通过名字和类型指定要使用的attribute 对象；</p><p>示例代码：</p><p>@Controller<br>@RequestMapping(“/editPet.do”)<br>@SessionAttributes(“pet”)<br>public class EditPetForm {<br>    // …<br>}</p><p>@ModelAttribute</p><p>该注解有两个用法，一个是用于方法上，一个是用于参数上；</p><p>用于方法上时：  通常用来在处理@RequestMapping之前，为请求绑定需要从后台查询的model；</p><p>用于参数上时： 用来通过名称对应，把相应名称的值绑定到注解的参数bean上；要绑定的值来源于：</p><p>A） @SessionAttributes 启用的attribute 对象上；</p><p>B） @ModelAttribute 用于方法上时指定的model对象；</p><p>C） 上述两种情况都没有时，new一个需要绑定的bean对象，然后把request中按名称对应的方式把值绑定到bean中。</p><p>用到方法上@ModelAttribute的示例代码：</p><p>@ModelAttribute<br>public Account addAccount(@RequestParam String number) {<br>    return accountManager.findAccount(number);<br>}</p><p>这种方式实际的效果就是在调用@RequestMapping的方法之前，为request对象的model里put（“account”， Account）。</p><p>用在参数上的@ModelAttribute示例代码：</p><p>@RequestMapping(value=”/owners/{ownerId}/pets/{petId}/edit”, method = RequestMethod.POST)<br>public String processSubmit(@ModelAttribute Pet pet) {  </p><p>}</p><p>首先查询 @SessionAttributes有无绑定的Pet对象，若没有则查询@ModelAttribute方法层面上是否绑定了Pet对象，若没有则将URI template中的值按对应的名称绑定到Pet对象的各属性上。</p><p>6、&lt; context:component-scan base-package = “” /&gt;浅析</p><p>component-scan 默认扫描的注解类型是 @Component，不过，在 @Component 语义基础上细化后的 @Repository, @Service 和 @Controller 也同样可以获得 component-scan 的青睐</p><p>有了<a href="context:component-scan">context:component-scan</a>，另一个<a href="context:annotation-config/">context:annotation-config/</a>标签根本可以移除掉，因为已经被包含进去了</p><p>另外<a href="context:annotation-config/">context:annotation-config/</a>还提供了两个子标签</p><ol><li><pre><code>   &lt;context:include-filter&gt; //指定扫描的路径</code></pre></li><li><pre><code>  &lt;context:exclude-filter&gt; //排除扫描的路径</code></pre></li></ol><p><a href="context:component-scan">context:component-scan</a>有一个use-default-filters属性，属性默认为true,表示会扫描指定包下的全部的标有@Component的类，并注册成bean.也就是@Component的子注解@Service,@Reposity等。</p><p>这种扫描的粒度有点太大，如果你只想扫描指定包下面的Controller或其他内容则设置use-default-filters属性为false，表示不再按照scan指定的包扫描，而是按照<a href="context:include-filter">context:include-filter</a>指定的包扫描，示例：</p><p>&lt;context:component-scan base-package=”com.tan” use-default-filters=”false”&gt;<br>        &lt;context:include-filter type=”regex” expression=”com.tan.<em>“/&gt;//注意后面要写.</em><br></context:component-scan></p><p>当没有设置use-default-filters属性或者属性为true时，表示基于base-packge包下指定扫描的具体路径</p><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs verilog">&lt;<span class="hljs-keyword">context</span>:component-scan base-<span class="hljs-keyword">package</span>=<span class="hljs-string">&quot;com.tan&quot;</span> &gt;<br>        &lt;<span class="hljs-keyword">context</span>:<span class="hljs-keyword">include</span>-filter <span class="hljs-keyword">type</span>=<span class="hljs-string">&quot;regex&quot;</span> expression=<span class="hljs-string">&quot;.controller.*&quot;</span>/&gt;<br>        &lt;<span class="hljs-keyword">context</span>:<span class="hljs-keyword">include</span>-filter <span class="hljs-keyword">type</span>=<span class="hljs-string">&quot;regex&quot;</span> expression=<span class="hljs-string">&quot;.service.*&quot;</span>/&gt;<br>        &lt;<span class="hljs-keyword">context</span>:<span class="hljs-keyword">include</span>-filter <span class="hljs-keyword">type</span>=<span class="hljs-string">&quot;regex&quot;</span> expression=<span class="hljs-string">&quot;.dao.*&quot;</span>/&gt;<br>&lt;/<span class="hljs-keyword">context</span>:component-scan&gt;<br></code></pre></td></tr></table></figure><p>效果相当于：</p><figure class="highlight vhdl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs vhdl">&lt;<span class="hljs-keyword">context</span>:<span class="hljs-keyword">component</span>-scan base-<span class="hljs-keyword">package</span>=<span class="hljs-string">&quot;com.tan&quot;</span> &gt;<br>        &lt;<span class="hljs-keyword">context</span>:exclude-filter <span class="hljs-keyword">type</span>=<span class="hljs-string">&quot;regex&quot;</span> expression=<span class="hljs-string">&quot;.model.*&quot;</span>/&gt;<br>&lt;/<span class="hljs-keyword">context</span>:<span class="hljs-keyword">component</span>-scan&gt;<br></code></pre></td></tr></table></figure><p>注意：本人尝试时无论哪种情况<code>&lt;context:include-filter&gt;</code>和<code>&lt;context:exclude-filter&gt;</code>都不能同时存在</p>]]></content>
    
    
    
    <tags>
      
      <tag>Javaee</tag>
      
      <tag>springmvc</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>tomcat笔记,编码问题</title>
    <link href="/2018/03/31/2018-03-31-tomcat-coding/"/>
    <url>/2018/03/31/2018-03-31-tomcat-coding/</url>
    
    <content type="html"><![CDATA[<blockquote><p>tomcat笔记<br>javaweb项目乱码解决方案</p></blockquote><h2 id="tomcat默认编码"><a href="#tomcat默认编码" class="headerlink" title="tomcat默认编码"></a>tomcat默认编码</h2><p>tomcat7及之前版本默认编码格式为<code>iso8859-1</code>   </p><p>tomcat8以后默认编码格式是<code>utf-8</code></p><h2 id="修改tomcat配置文件"><a href="#修改tomcat配置文件" class="headerlink" title="修改tomcat配置文件"></a>修改tomcat配置文件</h2><p>在<code>%tomcat%\conf\server.xml</code>中找到</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs routeros">&lt;Connector <span class="hljs-attribute">port</span>=<span class="hljs-string">&quot;8080&quot;</span> <span class="hljs-attribute">protocol</span>=<span class="hljs-string">&quot;HTTP/1.1&quot;</span><br>           <span class="hljs-attribute">connectionTimeout</span>=<span class="hljs-string">&quot;20000&quot;</span><br>           <span class="hljs-attribute">redirectPort</span>=<span class="hljs-string">&quot;8443&quot;</span> /&gt;<br></code></pre></td></tr></table></figure><p>这一段配置标签,添加<code>URIEncoding=&quot;utf-8&quot;</code>,设置默认编码为<code>UTF-8</code>  </p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs routeros">&lt;Connector <span class="hljs-attribute">port</span>=<span class="hljs-string">&quot;8080&quot;</span> <span class="hljs-attribute">protocol</span>=<span class="hljs-string">&quot;HTTP/1.1&quot;</span><br>           <span class="hljs-attribute">connectionTimeout</span>=<span class="hljs-string">&quot;20000&quot;</span><br>           <span class="hljs-attribute">redirectPort</span>=<span class="hljs-string">&quot;8443&quot;</span> <span class="hljs-attribute">URIEncoding</span>=<span class="hljs-string">&quot;utf-8&quot;</span>/&gt;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>tomcat</tag>
      
      <tag>Java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>jQuery笔记--选择器</title>
    <link href="/2018/03/31/2018-03-31-jquery-selectors/"/>
    <url>/2018/03/31/2018-03-31-jquery-selectors/</url>
    
    <content type="html"><![CDATA[<blockquote><p>参考:  <a href="http://www.w3school.com.cn/">w3c</a>  , <strong>jquery.api.3.2.1</strong></p></blockquote><h2 id="jQuery-选择器"><a href="#jQuery-选择器" class="headerlink" title="jQuery 选择器"></a>jQuery 选择器</h2><p>| 选择器 | 实例 | 选取 |<br>| #id | <code>$(&quot;#myDiv&quot;)</code> | id=”myDiv” 的元素 |<br>| <em>element</em> | <code>$(&quot;div&quot;)</code> | 所有 <div> 元素 |<br>| .class | <code>$(&quot;.myClass&quot;)</code> | 所有 class=”myClass” 的元素 |<br>| * | <code>$(&quot;*&quot;)</code> | 所有元素 |<br>| selector1,selector2,selectorN  | <code>$(&quot;div,span,p.myClass&quot;)</code>  | 所有匹配这三个条件的元素  |<br>|  this | <code>$(this)</code>  | 当前的html元素  |<br>|   |   |   |<br>| [attribute]  | <code>$(&quot;div[id]&quot;)</code>  | 所有含有 id 属性的 div 元素  |<br>|  [attribute=value] | <code>$(&quot;input[name=&#39;newsletter&#39;]&quot;)</code>  |  所有 name 属性是 newsletter 的 input 元素 |<br>|  [attribute!=value] | <code>$(&quot;input[name!=&#39;newsletter&#39;]&quot;)</code>  |  所有 name 属性不是 newsletter 的 input 元素 |<br>|  [attribute^=value] | <code>$(&quot;input[name^=&#39;news&#39;]&quot;)</code>  | 所有 name 以 ‘news’ 开始的 input 元素  |<br>|  [attribute$=value] |  <code>$(&quot;input[name$=&#39;letter&#39;]&quot;)</code> | 所有 name 以 ‘letter’ 结尾的 input 元素  |<br>| [attribute*=value]  | <code>$(&quot;input[name*=&#39;man&#39;]&quot;)</code>  | 所有 name 包含 ‘man’ 的 input 元素  |<br>| [selector1][selector2][selectorN]  | <code>$(&quot;input[id][name$=&#39;man&#39;]&quot;)</code>  | 所有含有 id 属性，并且它的 name 属性是以 man 结尾的元素  |<br>|   |   |   |<br>| ancestor descendant  | <code>$(&quot;form input&quot;)</code>  | form表单下的所有input元素  |<br>| parent &gt; child | <code>$(&quot;form &gt; input&quot;)</code>  | 表单中所有的子级input元素  |<br>| prev + next  | <code>$(&quot;label + input&quot;)</code>  | 所有跟在 label 后面的 input 元素  |<br>| prev ~ siblings  | <code>$(&quot;form ~ input&quot;)</code>  | 所有与表单同辈的 input 元素  |<br>|   |   |   |<br>| :first | <code>$(&quot;p:first&quot;)</code> | 第一个 <p> 元素 |<br>| :last | <code>$(&quot;p:last&quot;)</code> | 最后一个 <p> 元素 |<br>| :even | <code>$(&quot;tr:even&quot;)</code> | 所有偶数 <tr> 元素 |<br>| :odd | <code>$(&quot;tr:odd&quot;)</code> | 所有奇数 <tr> 元素 |<br>|   |   |   |<br>| :eq(<em>index</em>) | <code>$(&quot;ul li:eq(3)&quot;)</code> | 列表中的第四个元素（index 从 0 开始） |<br>| :gt(<em>no</em>) | <code>$(&quot;ul li:gt(3)&quot;)</code> | 列出 index 大于 3 的元素 |<br>| :lt(<em>no</em>) | <code>$(&quot;ul li:lt(3)&quot;)</code> | 列出 index 小于 3 的元素 |<br>| :not(<em>selector</em>) | <code>$(&quot;input:not(:empty)&quot;)</code> | 所有不为空的 input 元素 |<br>|   |   |   |<br>| :header | <code>$(&quot;:header&quot;)</code> | 所有标题元素 <h1> - <h6> |<br>| :animated |   | 所有动画元素 |<br>|   |   |   |<br>| :contains(<em>text</em>) | <code>$(&quot;:contains(&#39;W3School&#39;)&quot;)</code> | 包含指定字符串的所有元素 |<br>| :empty | <code>$(&quot;:empty&quot;)</code> | 无子（元素）节点的所有元素 |<br>| :hidden | <code>$(&quot;p:hidden&quot;)</code> | 所有隐藏的 <p> 元素 |<br>| :visible | <code>$(&quot;table:visible&quot;)</code> | 所有可见的表格 |<br>|   |   |   |<br>| <em>attribute</em> | <code>$(&quot;href]&quot;)</code> | 所有带有 href 属性的元素 |<br>| <em>attribute</em>=<em>value</em> | <code>$(&quot;href=&#39;#&#39;]&quot;)</code> | 所有 href 属性的值等于 “#” 的元素 |<br>| <em>attribute</em>!=<em>value</em> | <code>$(&quot;href!=&#39;#&#39;]&quot;)</code> | 所有 href 属性的值不等于 “#” 的元素 |<br>| <em>attribute</em>$=<em>value</em> | <code>$(&quot;href$=&#39;.jpg&#39;]&quot;)</code> | 所有 href 属性的值包含以 “.jpg” 结尾的元素 |<br>|   |   |   |<br>| :input | <code>$(&quot;:input&quot;)</code> | 所有 <code>&lt;input&gt;</code> 元素 |<br>| :text | <code>$(&quot;:text&quot;)</code> | 所有 type=”text” 的 <code>&lt;input&gt;</code> 元素 |<br>| :password | <code>$(&quot;:password&quot;)</code> | 所有 type=”password” 的 <code>&lt;input&gt;</code> 元素 |<br>| :radio | <code>$(&quot;:radio&quot;)</code> | 所有 type=”radio” 的 <code>&lt;input&gt;</code> 元素 |<br>| :checkbox | <code>$(&quot;:checkbox&quot;)</code> | 所有 type=”checkbox” 的 <code>&lt;input&gt;</code> 元素 |<br>| :submit | <code>$(&quot;:submit&quot;)</code> | 所有 type=”submit” 的 <code>&lt;input&gt;</code> 元素 |<br>| :reset | <code>$(&quot;:reset&quot;)</code> | 所有 type=”reset” 的 <code>&lt;input&gt;</code> 元素 |<br>| :button | <code>$(&quot;:button&quot;)</code> | 所有 type=”button” 的 <code>&lt;input&gt;</code> 元素 |<br>| :image | <code>$(&quot;:image&quot;)</code> | 所有 type=”image” 的 <code>&lt;input&gt;</code> 元素 |<br>| :file | <code>$(&quot;:file&quot;)</code> | 所有 type=”file” 的 <code>&lt;input&gt;</code> 元素 |<br>|   |   |   |<br>| :enabled | <code>$(&quot;:enabled&quot;)</code> | 所有激活的 <code>&lt;input&gt;</code> 元素 |<br>| :disabled | <code>$(&quot;:disabled&quot;)</code> | 所有禁用的 <code>&lt;input&gt;</code> 元素 |<br>| :selected | <code>$(&quot;:selected&quot;)</code> | 所有被选取的 <code>&lt;input&gt;</code> 元素 |<br>| :checked | <code>$(&quot;:checked&quot;)</code> | 所有被选中的 <code>&lt;input&gt;</code> 元素 |</p><h2 id="jquery对象和dom对象"><a href="#jquery对象和dom对象" class="headerlink" title="jquery对象和dom对象"></a>jquery对象和dom对象</h2><blockquote><p>jquery对象的实质   </p></blockquote><p>jquery对象其实是一个javascript的数组，这个数组对象包含125个方法和4个属性   </p><p>4个属性分别是   </p><ul><li><p><code>jquery</code>     当前的jquery框架版本号</p></li><li><p><code>length</code>     指示该数组对象的元素个数</p></li><li><p><code>context</code>    一般情况下都是指向HtmlDocument对象   </p></li><li><p><code>selector</code>   传递进来的选择器内容  如：#yourId或.yourClass等  </p></li></ul><blockquote><p>jquery对象和dom对象的转换  </p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> jq=$(<span class="hljs-string">&quot;#yourId&quot;</span>);<span class="hljs-comment">//jquery对象</span><br><span class="hljs-keyword">var</span> dom=<span class="hljs-built_in">document</span>.getElementById(<span class="hljs-string">&quot;yourId&quot;</span>);<span class="hljs-comment">//dom对象</span><br></code></pre></td></tr></table></figure><p><code>jq[0]</code>就是<code>HtmlElement</code>元素,和<code>dom</code>是等价的,也就是</p><figure class="highlight perl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs perl">var jq=$(<span class="hljs-string">&quot;#yourId&quot;</span>);<span class="hljs-regexp">//</span>jquery对象<br>var dom=j<span class="hljs-string">q[0]</span>;<span class="hljs-regexp">//d</span>om对象<br></code></pre></td></tr></table></figure><p>同时</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> dom=<span class="hljs-built_in">document</span>.getElementById(<span class="hljs-string">&quot;yourId&quot;</span>);<span class="hljs-comment">//dom对象</span><br><span class="hljs-keyword">var</span> jq=$(dom);<span class="hljs-comment">//jquery对象</span><br></code></pre></td></tr></table></figure><p>将dom对象包一层<code>$()</code>后,就成了<code>jquery</code>对象  </p><br>]]></content>
    
    
    
    <tags>
      
      <tag>JS</tag>
      
      <tag>前端</tag>
      
      <tag>jquery</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>GiT的基本认识</title>
    <link href="/2018/03/31/2018-3-01-Git-First/"/>
    <url>/2018/03/31/2018-3-01-Git-First/</url>
    
    <content type="html"><![CDATA[<h4 id="一-GIT简介"><a href="#一-GIT简介" class="headerlink" title="一.GIT简介"></a>一.GIT简介</h4><p>1比较CVS或SVN（弥补了CVS的不足），SVN最大的好处是解决了冲突，但是必须通过网络操作<br>2.在整个SVN过程中，如果要将开发者的代码保存到服务器上，必须保证SVN可以正常使用<br>3.有可能存在这么一种情况：有一个软件的开发项目，需要进行一个一个版本开发，需要回退到某一个版本时，需要从服务器进行恢复操作<br>4.git工具的优势是可以使用分支进行版本控制问题，而且是一个免费软件<br><img src="FCAF7879E8C143028478687335FA00E8" alt="image"></p><h4 id="二-安装GIT"><a href="#二-安装GIT" class="headerlink" title="二.安装GIT"></a>二.安装GIT</h4><p>1.官方下载页面：<a href="https://www.git-scm.com/">https://www.git-scm.com/</a><br>2.在windows命令行下进行GIT操作<br><img src="E6691D6B06B644C9BAD85BABCD70ADC5" alt="image"></p><h4 id="三-GIT简单的命令行"><a href="#三-GIT简单的命令行" class="headerlink" title="三.GIT简单的命令行"></a>三.GIT简单的命令行</h4><p>1.设置开发者的姓名和邮箱</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--可以进行全局信息设置    </span><br><span class="hljs-comment">如果想要协作开发,必须要存在开发者的环境配置--&gt;</span><br>git config --global user.name &#x27;pengelite&#x27;<br>git config --global user.email &#x27;537083337@qq.com&#x27;<br>```  <br>2.取得全部的全局信息<br></code></pre></td></tr></table></figure><p>git config –list<br>git config -l</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs">此时会返回git的全局信息<br><br></code></pre></td></tr></table></figure><p>core.symlinks=false<br>core.autocrlf=true<br>core.fscache=true<br>color.diff=auto<br>color.status=auto<br>color.branch=auto<br>color.interactive=true<br>help.format=html<br>rebase.autosquash=true<br>http.sslcainfo=C:/Program Files/Git/mingw64/ssl/certs/ca-bundle.crt<br>http.sslbackend=openssl<br>diff.astextplain.textconv=astextplain<br>filter.lfs.clean=git-lfs clean – %f<br>filter.lfs.smudge=git-lfs smudge – %f<br>filter.lfs.process=git-lfs filter-process<br>filter.lfs.required=true<br>credential.helper=manager<br>user.name=’pengelite’<br>user.email=‘<a href="mailto:&#x35;&#x33;&#x37;&#x30;&#x38;&#51;&#x33;&#51;&#55;&#64;&#113;&#x71;&#46;&#x63;&#111;&#109;">&#x35;&#x33;&#x37;&#x30;&#x38;&#51;&#x33;&#51;&#55;&#64;&#113;&#x71;&#46;&#x63;&#111;&#109;</a>‘</p><figure class="highlight clean"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs clean"><br>#### 四.创建仓库<br></code></pre></td></tr></table></figure><p>1.创建目录:<br>E:&gt;md e:\gitpro<br>2.进入该目录<br>cd gitpro<br>3.初始化仓库:<br>方法一:git init<br>提示信息Initialized empty Git repository in E:/.git/,会生成一个隐藏文件夹<br>方法二:git init –bare<br>可以发现此目录中不在生成”.git”的隐藏目录,而同时E:\gitpro将保存所有配置信息</p><figure class="highlight clean"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs clean">#### 五.软件的版本控制操作<br>在GIT之中,可以监控的而范围就是仓库信息(e:\gitpro就是一个仓库),那么在这个仓库里编写代码就可以了.  <br><span class="hljs-number">1.</span>编写一串代码<br><br></code></pre></td></tr></table></figure><p>命令:E:\gitpro&gt;git status<br>提示信息:<br>No commits yet</p><p>Untracked files:<br>  (use “git add <file>…” to include in what will be committed)</p><pre><code>    Area.java</code></pre><p>nothing added to commit but untracked files present (use “git add” to track)</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs">2.添加文件到暂存区中<br></code></pre></td></tr></table></figure><!--GIT发现仓库之中增加或者修改了文件,就需要提交到GIT的文件管理系统--><p>//命令<br>git add Area.java<br>//提示信息<br>On branch master</p><p>No commits yet</p><p>Changes to be committed:<br>  (use “git rm –cached <file>…” to unstage)</p><pre><code>    new file:   Area.java</code></pre><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs reasonml">此时GIT就知道了当前目录中有一个需要使用的新文件:<span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">Hello</span>.</span></span>java    <br><br><span class="hljs-number">3.</span>将文件提交到版本库中并添加注释信息  <br><br></code></pre></td></tr></table></figure><p>git commit -m”Create New File Area.java”<br>提示信息:[master (root-commit) ddc706c] Create New File Area.java<br> 1 file changed, 40 insertions(+)<br> create mode 100644 Area.java</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs"><br>4.同时提交多个新文件时<br><br></code></pre></td></tr></table></figure><p>E:\gitpro&gt;git status<br>On branch master<br>Untracked files:<br>  (use “git add <file>…” to include in what will be committed)</p><pre><code>    &quot;Area - \345\211\257\346\234\254 (2).java&quot;    &quot;Area - \345\211\257\346\234\254.java&quot;</code></pre><p>nothing added to commit but untracked files present (use “git add” to track)</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs routeros">git <span class="hljs-builtin-name">add</span> .<br><br><br></code></pre></td></tr></table></figure><p>E:\gitpro&gt;git status<br>On branch master<br>Changes to be committed:<br>  (use “git reset HEAD <file>…” to unstage)</p><pre><code>    new file:   &quot;Area - \345\211\257\346\234\254 (2).java&quot;    new file:   &quot;Area - \345\211\257\346\234\254.java&quot;</code></pre><figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs makefile">5.进行版本库的提交  <br><span class="hljs-section">范例:</span><br>git commit -m <span class="hljs-string">&quot;Add To Files&quot;</span><br><br></code></pre></td></tr></table></figure><p>[master 1f6123e] Add To Files<br> 2 files changed, 80 insertions(+)<br> create mode 100644 “Area - \345\211\257\346\234\254 (2).java”<br> create mode 100644 “Area - \345\211\257\346\234\254.java”</p><figure class="highlight avrasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs avrasm"><br>自动<span class="hljs-keyword">add</span>并修改到版本库中<br>当文件产生修改时,查询状态后直接将修改后的文件提交到版本库  <br>不区分版本库和暂存库<br></code></pre></td></tr></table></figure><p>git commit -a -m “Change Emp.java File”</p><figure class="highlight clean"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs clean"><br>#### 六.修改仓库文件 <br>    如果针对仓库文件进行修改的话,修改了文件中的内容,此时如果比较前后文件的改变<br>    <br></code></pre></td></tr></table></figure><p>git diff Area1.java</p><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs livecodeserver">此时会看到前后文件的差异,用+代表增加的代码,-代表减去的代码.此时可以用Q退出.使用这个工具可以帮助用户进行代码修改前后的区分.但是修改完的代码最终依然需要将其进行提交.<br>git commit -<span class="hljs-keyword">a</span> -m <span class="hljs-string">&quot;In Area.java File Add Two Statement&quot;</span><br>那么到此时为止已经出现了很多次提交,查看提交历史<br>git <span class="hljs-built_in">log</span> Area1.java<br>提醒信息:注意commitId<br><br></code></pre></td></tr></table></figure><p>commit b26a162e79efb7eb0771f31e4c2ae88d335d3b43 (HEAD -&gt; master)<br>Author: pengelite <a href="mailto:&#x35;&#x33;&#x37;&#x30;&#56;&#x33;&#51;&#x33;&#x37;&#64;&#x71;&#x71;&#x2e;&#x63;&#111;&#x6d;">&#x35;&#x33;&#x37;&#x30;&#56;&#x33;&#51;&#x33;&#x37;&#64;&#x71;&#x71;&#x2e;&#x63;&#111;&#x6d;</a><br>Date:   Wed Sep 5 20:18:15 2018 +0800</p><pre><code>In Area.java File Add Two Statement</code></pre><p>commit 06e4abf859bd30f12e7bdcaf56a6471ad3c5dcd1<br>Author: pengelite <a href="mailto:&#53;&#x33;&#x37;&#x30;&#56;&#51;&#51;&#51;&#x37;&#64;&#x71;&#x71;&#46;&#x63;&#111;&#109;">&#53;&#x33;&#x37;&#x30;&#56;&#51;&#51;&#51;&#x37;&#64;&#x71;&#x71;&#46;&#x63;&#111;&#109;</a><br>Date:   Wed Sep 5 18:07:14 2018 +0800</p><pre><code>Change Emp.java File</code></pre><p>commit 6ce7e838a187b9420d04b326af651069a60b6bd2<br>Author: pengelite <a href="mailto:&#x35;&#x33;&#55;&#x30;&#56;&#51;&#51;&#x33;&#x37;&#64;&#x71;&#x71;&#46;&#x63;&#111;&#x6d;">&#x35;&#x33;&#55;&#x30;&#56;&#51;&#51;&#x33;&#x37;&#64;&#x71;&#x71;&#46;&#x63;&#111;&#x6d;</a><br>Date:   Wed Sep 5 17:57:37 2018 +0800</p><figure class="highlight clean"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs clean">#### 七.认识工作区,暂存区,版本库(仓库) <br>工作区是整个GIT之中对于文件操作一共提供三个区域:  <br>工作区(用户所编写的代码文件夹):所有的文件操作都以工作区为主  <br>GIT仓库:  <br>|-暂存库:只是将工作区中的未保存文件保存到暂存区中,此部分由GIT维护  <br>|-版本库:真正进行项目发布的代码  <br>首先用户要在工作区之中编写所需要的程序文件,但是此时的文件并不能真正的保存在GIT的仓库之中,但是在这一个区域中所进行的文件的创建 修改 删除等操作并不会影响到最终的软件版本发布;就好比是一个临时区域.将这个临时区域的内容保存到最终发布的软件版本中,就需要首先将其加到暂存区(此时没有发布到版本库中表示可以撤销)<br>###### <span class="hljs-number">1.</span>工作区的操作  <br>![image](<span class="hljs-number">1</span>B2D3959CEB94B47A340FA241CC6B951)<br>###### <span class="hljs-number">2.</span>加入暂存区的操作,工作区中的新文件被删除  <br>![image](<span class="hljs-number">3</span>D75192EC66F49F3B44B465D9679327A)  <br>###### <span class="hljs-number">3.</span>暂存区<br>暂存区里的内容只能说是暂时需要的,那么可能也需要被删除掉.项目在Master分支上(版本库),才能够被其他人所使用.<br>###### <span class="hljs-number">4.</span>commit ID<br>由于一个项目可能会被发布多次,所以在GIT里面进行了保存之中,都回生成一个commit ID,用于版本回退<br>#### 八.操作步骤 <br>###### <span class="hljs-number">1.</span>修改Hello.java文件<br>现在的文件内容在工作区中给修改,这个文件不能真正的在项目中被使用,现在工作区的状态就发生了变化。<br>    此时输入命令<br>    <br></code></pre></td></tr></table></figure><p>git status</p><figure class="highlight clean"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs clean">返回提示信息  <br>![image](<span class="hljs-number">5</span>C55140668F0443A81A4BF065D2FD902)<br>###### <span class="hljs-number">2.</span>此时进行暂存区的保存<br><br></code></pre></td></tr></table></figure><p>git add .</p><figure class="highlight clean"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs clean">保存完成之后  <br>![image](E911B0DBD2D04638BDA2EDF3925CCBD5)  <br>git reset HEAD<br>暂存区的代码只代表暂时不改动，仍然可以恢复<br>###### <span class="hljs-number">3.</span>此时再次修改文件，没有使用add命令，修改的时工作区域的代码<br>![image](A347CBA72F364090BFAFB86055B7FE1F)  <br>此时出现两行提示，暂存区的文件还没有发布到分支上，工作区的文件也同时发生了变化。  <br>如果此时提交项目到版本库中（Master分支中），工作区的修改不被提交，查询工作区中的内容不被受到影响。  <br><br></code></pre></td></tr></table></figure><p>git commit -m “Commit Work Dir File”</p><figure class="highlight clean"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs clean"><br>![image](F5128F1569204B91B23140D54EFD59F9)  <br><br><br>#### 八.版本穿越<br><br>GIT中最强大的操作就在于可以进行版本的回退以及签禁状态下的切换。再任何的开发之中，对于软件的操作代码都很难保证其不恢复到原始状态。因为新增加的程序可能会因为某些原因，从而导致失败，此时必须要能够进行快速的版本恢复。<br>GIT进行版本穿越的核心概念在于CommitID<br><br></code></pre></td></tr></table></figure><p>git log</p><p>或者<br> git log –pretty=oneline</p><figure class="highlight clean"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs clean">git 有一个head指针，head指的是当前最新的版本号<br>修改HEAD到历史版本号，就回退到了之前的版本号<br>git reset --hard HEAD~<span class="hljs-number">1</span><br>![image](<span class="hljs-number">388</span>B7D3073FA4470A3376752E73B9615)  <br>回滚，需要查找提交点的位置。只能删除提交点的日志<br>git reflog<br>找到版本号<br>git reset --hard ddc706c<br><br>#### 九.撤销修改<br><br>######   情况I：在工作区中发生了改变，但是现在没有提交到暂存区  <br>恢复原来的代码，可以使用checkout操作  <br>（<span class="hljs-number">1</span>）首先使用git status查看当前状态<br>    git status 会提示文件已经被修改<br>    给出了一个参考命令，这是需要重新检出已有的代码，则需要使用git checkout Hello.java进行恢复<br>    <br> <br></code></pre></td></tr></table></figure><p>git checkout Hello.java</p><figure class="highlight clean"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs clean">只要执行完了这两条语句，就会表现当前的状态已经恢复<br>    <br>######   情况二：已经添加到了暂存区，但是没有提交到Master分支<br>    <br><span class="hljs-number">1.</span>将保存到暂存区<br><br></code></pre></td></tr></table></figure><p>git add .</p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs reasonml"><br>将保存在暂存区中的<span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">Hell</span>.</span></span>java恢复到工作区中<br><br></code></pre></td></tr></table></figure><p>git reset HEAD Hello.java</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs"><br><br></code></pre></td></tr></table></figure><p>git status</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs"><br>这个状态已经改了两个文件，hello由暂存区被推送到了工作区里<br>对于几个区域的操作：<br><br></code></pre></td></tr></table></figure><p>工作区——&gt;暂存区：   git add<br>暂存区——&gt;Master分支 git commit<br>暂存区——&gt;工作区：git reset HEAD 文件</p><figure class="highlight clean"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs clean"><br>#### 十.文件删除<br>删除工作区中的内容。删除Hello.java文件<br><br></code></pre></td></tr></table></figure><p>del Hello.java</p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs reasonml">    随后查询当前的状态<br>    <br><br><br>此时已经检查到了hello.java文件已经被删除了。MASTER分支上依然有<span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">Hello</span>.</span></span>java文件，所以必须进行更新提交<br><br></code></pre></td></tr></table></figure><p>git commit -a -m “Delete Hello.java File”</p><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs crmsh">此时<span class="hljs-literal">Master</span>分支上面的文件被删了。只要此时更新一旦提交，就表示不存在了。如果此时开发者认为Hello.java文件删除错了，此时可以进行恢复。<br><br>在工作区中把文件删了，<span class="hljs-literal">master</span>分支上依然存在hello.java文件<br></code></pre></td></tr></table></figure><p>git reset checkout – Hello.java</p><pre><code>两种情况工作区的删除可以利用checkout重新检出，master分支上的删除必须利用版本穿越来进行</code></pre>]]></content>
    
    
    
    <tags>
      
      <tag>git</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>JS window.location对象笔记,url解剖</title>
    <link href="/2017/12/21/2017-12-21-http_window.location/"/>
    <url>/2017/12/21/2017-12-21-http_window.location/</url>
    
    <content type="html"><![CDATA[<blockquote><p>参考:<a href="http://www.w3school.com.cn/">W3C</a>,<a href="http://www.jb51.net/article/57407.htm">hebedich</a><br>window.location对象笔记</p></blockquote><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>location是一个常用的对象,我们可以通过他获得有关当前 <strong>URL</strong> 的信息   </p><p>PS: window.location等价于document.location，可以交换使用</p><p>关于他的属性以及一些方法却一直记得不是很熟,在这里做一个简单的笔记,方便以后查看</p><h2 id="Location"><a href="#Location" class="headerlink" title="Location"></a>Location</h2><blockquote><p>一个例子</p></blockquote><p>URL:  <a href="/">http://127.0.0.1:4000/2017/12/21/http_window.location/?name=fedemo&amp;&amp;id=001#cn</a>  </p><h4 id="Location-对象属性"><a href="#Location-对象属性" class="headerlink" title="Location 对象属性"></a>Location 对象属性</h4><p>这八个属性都是可读写的,我们可以设置或返回其中的数据<br>但是只有修改href与hash还有意义,location.href会重新定位到一个URL，而修改location.hash会跳到当前页面中的anchor(<code>&lt;a id=&quot;name&quot;&gt;</code>或者<code>&lt;div id=&quot;id&quot;&gt;</code>等)名字的标记(如果有)，而且页面不会被重新加载</p><table><thead><tr><th align="center">属性</th><th align="center">描述</th><th align="center">值</th></tr></thead><tbody><tr><td align="center">hash</td><td align="center">从井号 (#) 开始的 URL（锚）</td><td align="center">#cn</td></tr><tr><td align="center">host</td><td align="center">主机名和当前 URL 的端口号</td><td align="center">4000</td></tr><tr><td align="center">hostname</td><td align="center">当前 URL 的主机名</td><td align="center">127.0.0.1</td></tr><tr><td align="center">href</td><td align="center">完整的 URL</td><td align="center"><a href="http://127.0.0.1:4000/2017/12/21/http_window.location/?name=fedemo&amp;&amp;id=001#cn">http://127.0.0.1:4000/2017/12/21/http_window.location/?name=fedemo&amp;&amp;id=001#cn</a></td></tr><tr><td align="center">pathname</td><td align="center">当前 URL 的路径部分</td><td align="center">/2017/12/21/http_window.location/</td></tr><tr><td align="center">port</td><td align="center">当前 URL 的端口号</td><td align="center">4000</td></tr><tr><td align="center">protocol</td><td align="center">当前 URL 的协议</td><td align="center">http</td></tr><tr><td align="center">search</td><td align="center">从问号 (?) 开始的 URL（查询部分）</td><td align="center">?name=fedemo&amp;&amp;id=001</td></tr></tbody></table><p>PS: <code>hash</code>和<code>search</code>,实质上是截取第一个#(?)之后的字段<br><br></p><h4 id="Location-对象方法"><a href="#Location-对象方法" class="headerlink" title="Location 对象方法"></a>Location 对象方法</h4><table><thead><tr><th align="center">属性</th><th align="center">描述</th></tr></thead><tbody><tr><td align="center">assign()</td><td align="center">加载新的文档</td></tr><tr><td align="center">reload()</td><td align="center">重新加载当前文档</td></tr><tr><td align="center">replace()</td><td align="center">用新的文档替换当前文档</td></tr></tbody></table><blockquote><p>location.assign( url )</p></blockquote><p>location.assign(‘<a href="http://www.baidu.com&/#39;">http://www.baidu.com&#39;</a>); 等价于 window.location = ‘<a href="http://www.baidu.com&/#39;">http://www.baidu.com&#39;</a>   </p><p>这种方式会将新地址放到浏览器历史栈中，意味着转到新页面后“后退按钮”仍可以回到该页面。</p><blockquote><p>location.reload( force )</p></blockquote><p>重新载入当前页面。force为true时从服务器端重载；false则从浏览器缓存中重载，默认值false。</p><blockquote><p>location.replace( url )</p></blockquote><p>与assign方法一样，但会从浏览器历史栈中删除本页面，也就是说跳转到新页面后“后退按钮”不能回到该页面。   </p><p>目前IE、Chrome只是简单的跳转，只有Firefox会删除本页面的历史记录。</p><h2 id="对象描述"><a href="#对象描述" class="headerlink" title="对象描述"></a>对象描述</h2><p>Location 对象存储在 Window 对象的 Location 属性中，表示那个窗口中当前显示的文档的 Web 地址。它的 href 属性存放的是文档的完整 URL，其他属性则分别描述了 URL 的各个部分。这些属性与 Anchor 对象（或 Area 对象）的 URL 属性非常相似。当一个 Location 对象被转换成字符串，href 属性的值被返回。这意味着你可以使用表达式 location 来替代 location.href。</p><p>不过 Anchor 对象表示的是文档中的超链接，Location 对象表示的却是浏览器当前显示的文档的 URL（或位置）。但是 Location 对象所能做的远远不止这些，它还能控制浏览器显示的文档的位置。如果把一个含有 URL 的字符串赋予 Location 对象或它的 href 属性，浏览器就会把新的 URL 所指的文档装载进来，并显示出来。</p><p>除了设置 location 或 location.href 用完整的 URL 替换当前的 URL 之外，还可以修改部分 URL，只需要给 Location 对象的其他属性赋值即可。这样做就会创建新的 URL，其中的一部分与原来的 URL 不同，浏览器会将它装载并显示出来。例如，假设设置了Location对象的 hash 属性，那么浏览器就会转移到当前文档中的一个指定的位置。同样，如果设置了 search 属性，那么浏览器就会重新装载附加了新的查询字符串的 URL。</p><p>除了 URL 属性外，Location 对象的 reload() 方法可以重新装载当前文档，replace() 可以装载一个新文档而无须为它创建一个新的历史记录，也就是说，在浏览器的历史列表中，新文档将替换当前文档。</p><h2 id="url"><a href="#url" class="headerlink" title="url"></a>url</h2><p>url: 统一资源定位符 / Uniform Resource Locator</p><p>统一资源定位符是对可以从互联网上得到的资源的位置和访问方法的一种简洁的表示，是互联网上标准资源的地址。互联网上的每个文件都有一个唯一的URL，它包含的信息指出文件的位置以及浏览器应该怎么处理它。   </p><p>它最初是由蒂姆·伯纳斯·李发明用来作为万维网的地址。现在它已经被万维网联盟编制为互联网标准RFC1738了。</p>]]></content>
    
    
    
    <tags>
      
      <tag>Http</tag>
      
      <tag>JS</tag>
      
      <tag>前端</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
